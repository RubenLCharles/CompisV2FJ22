Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARC
    CHAR_CTE
    CIRCLE
    COLOR
    COMMENT
    GTE_LOG
    LINE
    LTE_LOG
    NEW_LINE
    PENDOWN
    PENUP
    POINT
    SIZE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMIC dec_var_gob def_funciones main pn_print
Rule 2     dec_var_gob -> VARS tipos COLON lista_ids dec_var_aux
Rule 3     dec_var_gob -> empty
Rule 4     dec_var_aux -> tipos COLON lista_ids SEMIC dec_var_aux
Rule 5     dec_var_aux -> empty
Rule 6     lista_ids -> ID lista_aux lista_aux_b
Rule 7     lista_aux -> LBRACK INT_CTE RBRACK
Rule 8     lista_aux -> empty
Rule 9     lista_aux_b -> COMMA lista_ids
Rule 10    lista_aux_b -> empty
Rule 11    tipos -> INT_TYPE pn_tipoAct
Rule 12    tipos -> FLOAT_TYPE pn_tipoAct
Rule 13    tipos -> CHAR_TYPE pn_tipoAct
Rule 14    def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4
Rule 15    def_funciones -> empty
Rule 16    tipos_func -> INT_TYPE pn_tipoAct
Rule 17    tipos_func -> VOID pn_tipoAct
Rule 18    dec_var_loc -> VARS tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec
Rule 19    dec_var_loc -> empty
Rule 20    dec_var_loc_aux -> COMMA ID dec_var_loc_aux
Rule 21    dec_var_loc_aux -> empty
Rule 22    var_loc_rec -> tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec
Rule 23    var_loc_rec -> empty
Rule 24    parametros -> tipos COLON ID pn_func2 param_aux
Rule 25    param_aux -> COMMA parametros
Rule 26    param_aux -> empty
Rule 27    main -> MAIN LPAREN RPAREN pn_cambioCtxt bloque
Rule 28    bloque -> LCURLY estatutos estatu_rec RCURLY
Rule 29    estatu_rec -> estatutos estatu_rec
Rule 30    estatu_rec -> empty
Rule 31    estatutos -> asignacion
Rule 32    estatutos -> declaracion
Rule 33    estatutos -> llamada_func
Rule 34    estatutos -> llamada_void
Rule 35    estatutos -> retorno
Rule 36    estatutos -> lectura
Rule 37    estatutos -> escritura
Rule 38    estatutos -> decision
Rule 39    estatutos -> loop_cond
Rule 40    estatutos -> loop_no_cond
Rule 41    estatutos -> expresiones
Rule 42    estatutos -> empty
Rule 43    asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC
Rule 44    declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC
Rule 45    declaracion_aux -> ASSIGN pn_secu1 expresiones pn_secu2
Rule 46    declaracion_aux -> empty
Rule 47    llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
Rule 48    llamada_func_aux -> expresiones pn_llamFunc2 llama_func_auxb
Rule 49    llamada_func_aux -> empty
Rule 50    llama_func_auxb -> COMMA llamada_func_aux
Rule 51    llama_func_auxb -> empty
Rule 52    llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC
Rule 53    llamada_void_aux -> expresiones pn_llamFunc2 llama_void_auxb
Rule 54    llamada_void_aux -> empty
Rule 55    llama_void_auxb -> COMMA llamada_func_aux
Rule 56    llama_void_auxb -> empty
Rule 57    retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC
Rule 58    lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5
Rule 59    lec_aux -> COMMA ID lec_aux
Rule 60    lec_aux -> empty
Rule 61    escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5
Rule 62    esc_aux -> STRING_CTE pn_secu4 esc_rec
Rule 63    esc_aux -> expresiones pn_secu4 esc_rec
Rule 64    esc_aux -> empty
Rule 65    esc_rec -> COMMA esc_aux
Rule 66    esc_rec -> empty
Rule 67    decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2
Rule 68    else -> ELSE pn_cond3 bloque
Rule 69    else -> empty
Rule 70    loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3
Rule 71    loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque
Rule 72    nocond_aux -> LBRACK expresiones RBRACK
Rule 73    nocond_aux -> empty
Rule 74    expresiones -> t_exp or_check
Rule 75    or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10
Rule 76    or_check -> empty
Rule 77    t_exp -> g_exp and_check
Rule 78    and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10
Rule 79    and_check -> empty
Rule 80    g_exp -> m_exp op_check
Rule 81    op_check -> empty
Rule 82    op_check -> comparacion m_exp pn_expresion8
Rule 83    comparacion -> GT_LOG pn_expresion7
Rule 84    comparacion -> LT_LOG pn_expresion7
Rule 85    comparacion -> EQUAL_LOG pn_expresion7
Rule 86    comparacion -> NE_LOG pn_expresion7
Rule 87    m_exp -> termino pn_expresion3 m_rec
Rule 88    m_rec -> PLUS_OP pn_expresion1 m_exp
Rule 89    m_rec -> MINUS_OP pn_expresion1 m_exp
Rule 90    m_rec -> empty
Rule 91    termino -> factor pn_expresion4 term_rec
Rule 92    term_rec -> MULT_OP pn_expresion2 termino
Rule 93    term_rec -> DIV_OP pn_expresion2 termino
Rule 94    term_rec -> empty
Rule 95    factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
Rule 96    factor -> cte
Rule 97    factor -> ID
Rule 98    factor -> llamada_func
Rule 99    cte -> INT_CTE pn_constante
Rule 100   cte -> FLOAT_CTE pn_constante
Rule 101   empty -> <empty>
Rule 102   pn_cambioCtxt -> <empty>
Rule 103   pn_expresionID -> <empty>
Rule 104   pn_expresionID2 -> <empty>
Rule 105   pn_expresion1 -> <empty>
Rule 106   pn_expresion2 -> <empty>
Rule 107   pn_expresion3 -> <empty>
Rule 108   pn_expresion4 -> <empty>
Rule 109   pn_expresion5 -> <empty>
Rule 110   pn_expresion6 -> <empty>
Rule 111   pn_expresion7 -> <empty>
Rule 112   pn_expresion8 -> <empty>
Rule 113   pn_expresion9 -> <empty>
Rule 114   pn_expresion10 -> <empty>
Rule 115   pn_secu1 -> <empty>
Rule 116   pn_secu2 -> <empty>
Rule 117   pn_secu3 -> <empty>
Rule 118   pn_secu4 -> <empty>
Rule 119   pn_secu5 -> <empty>
Rule 120   pn_cond1 -> <empty>
Rule 121   pn_cond2 -> <empty>
Rule 122   pn_cond3 -> <empty>
Rule 123   pn_loop1 -> <empty>
Rule 124   pn_loop2 -> <empty>
Rule 125   pn_loop3 -> <empty>
Rule 126   pn_tipoAct -> <empty>
Rule 127   pn_parametrosTipo -> <empty>
Rule 128   pn_func1 -> <empty>
Rule 129   pn_func2 -> <empty>
Rule 130   pn_func3 -> <empty>
Rule 131   pn_func4 -> <empty>
Rule 132   pn_llamFunc1 -> <empty>
Rule 133   pn_llamFunc2 -> <empty>
Rule 134   pn_llamFunc3 -> <empty>
Rule 135   pn_GotoMain -> <empty>
Rule 136   pn_constante -> <empty>
Rule 137   pn_print -> <empty>

Terminals, with rules where they appear

AND_LOG              : 78
ARC                  : 
ASSIGN               : 43 45 71
CHAR_CTE             : 
CHAR_TYPE            : 13
CIRCLE               : 
COLON                : 2 4 18 22 24
COLOR                : 
COMMA                : 9 20 25 50 55 59 65
COMMENT              : 
DIV_OP               : 93
DO                   : 70 71
ELSE                 : 68
EQUAL_LOG            : 85
FLOAT_CTE            : 100
FLOAT_TYPE           : 12
FOR                  : 71
FUNCTION             : 14
GTE_LOG              : 
GT_LOG               : 83
ID                   : 1 6 14 18 20 22 24 43 44 47 52 58 59 71 97
IF                   : 67
INT_CTE              : 7 99
INT_TYPE             : 11 16
LBRACK               : 7 72
LCURLY               : 28
LINE                 : 
LPAREN               : 14 27 47 52 57 58 61 67 70 95
LTE_LOG              : 
LT_LOG               : 84
MAIN                 : 27
MINUS_OP             : 89
MULT_OP              : 92
NEW_LINE             : 
NE_LOG               : 86
OR_LOG               : 75
PENDOWN              : 
PENUP                : 
PLUS_OP              : 88
POINT                : 
PROGRAM              : 1
RBRACK               : 7 72
RCURLY               : 28
READ                 : 58
RETURN               : 57
RPAREN               : 14 27 47 52 57 58 61 67 70 95
SEMIC                : 1 4 14 18 22 43 44 47 52 57 58 61
SIZE                 : 
STRING_CTE           : 62
THEN                 : 67
TO                   : 71
VARS                 : 2 18
VOID                 : 17
WHILE                : 70
WRITE                : 61
error                : 

Nonterminals, with rules where they appear

and_check            : 77
asignacion           : 31
bloque               : 14 27 67 68 70 71
comparacion          : 82
cte                  : 96
dec_var_aux          : 2 4
dec_var_gob          : 1
dec_var_loc          : 14
dec_var_loc_aux      : 18 20 22
decision             : 38
declaracion          : 32
declaracion_aux      : 44
def_funciones        : 1
else                 : 67
empty                : 3 5 8 10 15 19 21 23 26 30 42 46 49 51 54 56 60 64 66 69 73 76 79 81 90 94
esc_aux              : 61 65
esc_rec              : 62 63
escritura            : 37
estatu_rec           : 28 29
estatutos            : 28 29
expresiones          : 41 43 45 48 53 57 63 67 70 71 71 72 75 95
factor               : 91
g_exp                : 77
lec_aux              : 58 59
lectura              : 36
lista_aux            : 6
lista_aux_b          : 6
lista_ids            : 2 4 9
llama_func_auxb      : 48
llama_void_auxb      : 53
llamada_func         : 33 98
llamada_func_aux     : 47 50 55
llamada_void         : 34
llamada_void_aux     : 52
loop_cond            : 39
loop_no_cond         : 40
m_exp                : 80 82 88 89
m_rec                : 87
main                 : 1
nocond_aux           : 71
op_check             : 80
or_check             : 74
param_aux            : 24
parametros           : 14 25
pn_GotoMain          : 
pn_cambioCtxt        : 27
pn_cond1             : 67
pn_cond2             : 67
pn_cond3             : 68
pn_constante         : 99 100
pn_expresion1        : 88 89
pn_expresion10       : 75 78
pn_expresion2        : 92 93
pn_expresion3        : 87
pn_expresion4        : 91
pn_expresion5        : 47 95
pn_expresion6        : 47 95
pn_expresion7        : 83 84 85 86
pn_expresion8        : 82
pn_expresion9        : 75 78
pn_expresionID       : 44
pn_expresionID2      : 43
pn_func1             : 14
pn_func2             : 24
pn_func3             : 14
pn_func4             : 14
pn_llamFunc1         : 47 52
pn_llamFunc2         : 48 53
pn_llamFunc3         : 47 52
pn_loop1             : 70
pn_loop2             : 70
pn_loop3             : 70
pn_parametrosTipo    : 
pn_print             : 1
pn_secu1             : 43 45
pn_secu2             : 43 45
pn_secu3             : 57 58 61
pn_secu4             : 58 62 63
pn_secu5             : 58 61
pn_tipoAct           : 11 12 13 16 17
program              : 0
retorno              : 35
t_exp                : 74 78
term_rec             : 91
termino              : 87 92 93
tipos                : 2 4 18 22 24 44
tipos_func           : 14
var_loc_rec          : 18 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMIC dec_var_gob def_funciones main pn_print

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMIC dec_var_gob def_funciones main pn_print

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMIC dec_var_gob def_funciones main pn_print

    SEMIC           shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMIC . dec_var_gob def_funciones main pn_print
    (2) dec_var_gob -> . VARS tipos COLON lista_ids dec_var_aux
    (3) dec_var_gob -> . empty
    (101) empty -> .

    VARS            shift and go to state 6
    FUNCTION        reduce using rule 101 (empty -> .)
    MAIN            reduce using rule 101 (empty -> .)

    dec_var_gob                    shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMIC dec_var_gob . def_funciones main pn_print
    (14) def_funciones -> . FUNCTION tipos_func ID pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4
    (15) def_funciones -> . empty
    (101) empty -> .

    FUNCTION        shift and go to state 9
    MAIN            reduce using rule 101 (empty -> .)

    def_funciones                  shift and go to state 8
    empty                          shift and go to state 10

state 6

    (2) dec_var_gob -> VARS . tipos COLON lista_ids dec_var_aux
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct

    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14

    tipos                          shift and go to state 11

state 7

    (3) dec_var_gob -> empty .

    FUNCTION        reduce using rule 3 (dec_var_gob -> empty .)
    MAIN            reduce using rule 3 (dec_var_gob -> empty .)


state 8

    (1) program -> PROGRAM ID SEMIC dec_var_gob def_funciones . main pn_print
    (27) main -> . MAIN LPAREN RPAREN pn_cambioCtxt bloque

    MAIN            shift and go to state 16

    main                           shift and go to state 15

state 9

    (14) def_funciones -> FUNCTION . tipos_func ID pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4
    (16) tipos_func -> . INT_TYPE pn_tipoAct
    (17) tipos_func -> . VOID pn_tipoAct

    INT_TYPE        shift and go to state 18
    VOID            shift and go to state 19

    tipos_func                     shift and go to state 17

state 10

    (15) def_funciones -> empty .

    MAIN            reduce using rule 15 (def_funciones -> empty .)


state 11

    (2) dec_var_gob -> VARS tipos . COLON lista_ids dec_var_aux

    COLON           shift and go to state 20


state 12

    (11) tipos -> INT_TYPE . pn_tipoAct
    (126) pn_tipoAct -> .

    COLON           reduce using rule 126 (pn_tipoAct -> .)
    ID              reduce using rule 126 (pn_tipoAct -> .)

    pn_tipoAct                     shift and go to state 21

state 13

    (12) tipos -> FLOAT_TYPE . pn_tipoAct
    (126) pn_tipoAct -> .

    COLON           reduce using rule 126 (pn_tipoAct -> .)
    ID              reduce using rule 126 (pn_tipoAct -> .)

    pn_tipoAct                     shift and go to state 22

state 14

    (13) tipos -> CHAR_TYPE . pn_tipoAct
    (126) pn_tipoAct -> .

    COLON           reduce using rule 126 (pn_tipoAct -> .)
    ID              reduce using rule 126 (pn_tipoAct -> .)

    pn_tipoAct                     shift and go to state 23

state 15

    (1) program -> PROGRAM ID SEMIC dec_var_gob def_funciones main . pn_print
    (137) pn_print -> .

    $end            reduce using rule 137 (pn_print -> .)

    pn_print                       shift and go to state 24

state 16

    (27) main -> MAIN . LPAREN RPAREN pn_cambioCtxt bloque

    LPAREN          shift and go to state 25


state 17

    (14) def_funciones -> FUNCTION tipos_func . ID pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4

    ID              shift and go to state 26


state 18

    (16) tipos_func -> INT_TYPE . pn_tipoAct
    (126) pn_tipoAct -> .

    ID              reduce using rule 126 (pn_tipoAct -> .)

    pn_tipoAct                     shift and go to state 27

state 19

    (17) tipos_func -> VOID . pn_tipoAct
    (126) pn_tipoAct -> .

    ID              reduce using rule 126 (pn_tipoAct -> .)

    pn_tipoAct                     shift and go to state 28

state 20

    (2) dec_var_gob -> VARS tipos COLON . lista_ids dec_var_aux
    (6) lista_ids -> . ID lista_aux lista_aux_b

    ID              shift and go to state 30

    lista_ids                      shift and go to state 29

state 21

    (11) tipos -> INT_TYPE pn_tipoAct .

    COLON           reduce using rule 11 (tipos -> INT_TYPE pn_tipoAct .)
    ID              reduce using rule 11 (tipos -> INT_TYPE pn_tipoAct .)


state 22

    (12) tipos -> FLOAT_TYPE pn_tipoAct .

    COLON           reduce using rule 12 (tipos -> FLOAT_TYPE pn_tipoAct .)
    ID              reduce using rule 12 (tipos -> FLOAT_TYPE pn_tipoAct .)


state 23

    (13) tipos -> CHAR_TYPE pn_tipoAct .

    COLON           reduce using rule 13 (tipos -> CHAR_TYPE pn_tipoAct .)
    ID              reduce using rule 13 (tipos -> CHAR_TYPE pn_tipoAct .)


state 24

    (1) program -> PROGRAM ID SEMIC dec_var_gob def_funciones main pn_print .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMIC dec_var_gob def_funciones main pn_print .)


state 25

    (27) main -> MAIN LPAREN . RPAREN pn_cambioCtxt bloque

    RPAREN          shift and go to state 31


state 26

    (14) def_funciones -> FUNCTION tipos_func ID . pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4
    (128) pn_func1 -> .

    LPAREN          reduce using rule 128 (pn_func1 -> .)

    pn_func1                       shift and go to state 32

state 27

    (16) tipos_func -> INT_TYPE pn_tipoAct .

    ID              reduce using rule 16 (tipos_func -> INT_TYPE pn_tipoAct .)


state 28

    (17) tipos_func -> VOID pn_tipoAct .

    ID              reduce using rule 17 (tipos_func -> VOID pn_tipoAct .)


state 29

    (2) dec_var_gob -> VARS tipos COLON lista_ids . dec_var_aux
    (4) dec_var_aux -> . tipos COLON lista_ids SEMIC dec_var_aux
    (5) dec_var_aux -> . empty
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct
    (101) empty -> .

    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14
    FUNCTION        reduce using rule 101 (empty -> .)
    MAIN            reduce using rule 101 (empty -> .)

    tipos                          shift and go to state 33
    dec_var_aux                    shift and go to state 34
    empty                          shift and go to state 35

state 30

    (6) lista_ids -> ID . lista_aux lista_aux_b
    (7) lista_aux -> . LBRACK INT_CTE RBRACK
    (8) lista_aux -> . empty
    (101) empty -> .

    LBRACK          shift and go to state 37
    COMMA           reduce using rule 101 (empty -> .)
    INT_TYPE        reduce using rule 101 (empty -> .)
    FLOAT_TYPE      reduce using rule 101 (empty -> .)
    CHAR_TYPE       reduce using rule 101 (empty -> .)
    FUNCTION        reduce using rule 101 (empty -> .)
    MAIN            reduce using rule 101 (empty -> .)
    SEMIC           reduce using rule 101 (empty -> .)

    lista_aux                      shift and go to state 36
    empty                          shift and go to state 38

state 31

    (27) main -> MAIN LPAREN RPAREN . pn_cambioCtxt bloque
    (102) pn_cambioCtxt -> .

    LCURLY          reduce using rule 102 (pn_cambioCtxt -> .)

    pn_cambioCtxt                  shift and go to state 39

state 32

    (14) def_funciones -> FUNCTION tipos_func ID pn_func1 . LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4

    LPAREN          shift and go to state 40


state 33

    (4) dec_var_aux -> tipos . COLON lista_ids SEMIC dec_var_aux

    COLON           shift and go to state 41


state 34

    (2) dec_var_gob -> VARS tipos COLON lista_ids dec_var_aux .

    FUNCTION        reduce using rule 2 (dec_var_gob -> VARS tipos COLON lista_ids dec_var_aux .)
    MAIN            reduce using rule 2 (dec_var_gob -> VARS tipos COLON lista_ids dec_var_aux .)


state 35

    (5) dec_var_aux -> empty .

    FUNCTION        reduce using rule 5 (dec_var_aux -> empty .)
    MAIN            reduce using rule 5 (dec_var_aux -> empty .)


state 36

    (6) lista_ids -> ID lista_aux . lista_aux_b
    (9) lista_aux_b -> . COMMA lista_ids
    (10) lista_aux_b -> . empty
    (101) empty -> .

    COMMA           shift and go to state 43
    INT_TYPE        reduce using rule 101 (empty -> .)
    FLOAT_TYPE      reduce using rule 101 (empty -> .)
    CHAR_TYPE       reduce using rule 101 (empty -> .)
    FUNCTION        reduce using rule 101 (empty -> .)
    MAIN            reduce using rule 101 (empty -> .)
    SEMIC           reduce using rule 101 (empty -> .)

    lista_aux_b                    shift and go to state 42
    empty                          shift and go to state 44

state 37

    (7) lista_aux -> LBRACK . INT_CTE RBRACK

    INT_CTE         shift and go to state 45


state 38

    (8) lista_aux -> empty .

    COMMA           reduce using rule 8 (lista_aux -> empty .)
    INT_TYPE        reduce using rule 8 (lista_aux -> empty .)
    FLOAT_TYPE      reduce using rule 8 (lista_aux -> empty .)
    CHAR_TYPE       reduce using rule 8 (lista_aux -> empty .)
    FUNCTION        reduce using rule 8 (lista_aux -> empty .)
    MAIN            reduce using rule 8 (lista_aux -> empty .)
    SEMIC           reduce using rule 8 (lista_aux -> empty .)


state 39

    (27) main -> MAIN LPAREN RPAREN pn_cambioCtxt . bloque
    (28) bloque -> . LCURLY estatutos estatu_rec RCURLY

    LCURLY          shift and go to state 47

    bloque                         shift and go to state 46

state 40

    (14) def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN . parametros RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4
    (24) parametros -> . tipos COLON ID pn_func2 param_aux
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct

    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14

    parametros                     shift and go to state 48
    tipos                          shift and go to state 49

state 41

    (4) dec_var_aux -> tipos COLON . lista_ids SEMIC dec_var_aux
    (6) lista_ids -> . ID lista_aux lista_aux_b

    ID              shift and go to state 30

    lista_ids                      shift and go to state 50

state 42

    (6) lista_ids -> ID lista_aux lista_aux_b .

    INT_TYPE        reduce using rule 6 (lista_ids -> ID lista_aux lista_aux_b .)
    FLOAT_TYPE      reduce using rule 6 (lista_ids -> ID lista_aux lista_aux_b .)
    CHAR_TYPE       reduce using rule 6 (lista_ids -> ID lista_aux lista_aux_b .)
    FUNCTION        reduce using rule 6 (lista_ids -> ID lista_aux lista_aux_b .)
    MAIN            reduce using rule 6 (lista_ids -> ID lista_aux lista_aux_b .)
    SEMIC           reduce using rule 6 (lista_ids -> ID lista_aux lista_aux_b .)


state 43

    (9) lista_aux_b -> COMMA . lista_ids
    (6) lista_ids -> . ID lista_aux lista_aux_b

    ID              shift and go to state 30

    lista_ids                      shift and go to state 51

state 44

    (10) lista_aux_b -> empty .

    INT_TYPE        reduce using rule 10 (lista_aux_b -> empty .)
    FLOAT_TYPE      reduce using rule 10 (lista_aux_b -> empty .)
    CHAR_TYPE       reduce using rule 10 (lista_aux_b -> empty .)
    FUNCTION        reduce using rule 10 (lista_aux_b -> empty .)
    MAIN            reduce using rule 10 (lista_aux_b -> empty .)
    SEMIC           reduce using rule 10 (lista_aux_b -> empty .)


state 45

    (7) lista_aux -> LBRACK INT_CTE . RBRACK

    RBRACK          shift and go to state 52


state 46

    (27) main -> MAIN LPAREN RPAREN pn_cambioCtxt bloque .

    $end            reduce using rule 27 (main -> MAIN LPAREN RPAREN pn_cambioCtxt bloque .)


state 47

    (28) bloque -> LCURLY . estatutos estatu_rec RCURLY
    (31) estatutos -> . asignacion
    (32) estatutos -> . declaracion
    (33) estatutos -> . llamada_func
    (34) estatutos -> . llamada_void
    (35) estatutos -> . retorno
    (36) estatutos -> . lectura
    (37) estatutos -> . escritura
    (38) estatutos -> . decision
    (39) estatutos -> . loop_cond
    (40) estatutos -> . loop_no_cond
    (41) estatutos -> . expresiones
    (42) estatutos -> . empty
    (43) asignacion -> . ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC
    (44) declaracion -> . tipos ID pn_expresionID declaracion_aux SEMIC
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
    (52) llamada_void -> . ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC
    (57) retorno -> . RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC
    (58) lectura -> . READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5
    (61) escritura -> . WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5
    (67) decision -> . IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2
    (70) loop_cond -> . WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3
    (71) loop_no_cond -> . FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque
    (74) expresiones -> . t_exp or_check
    (101) empty -> .
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for CHAR_TYPE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_CTE resolved as shift
  ! shift/reduce conflict for FLOAT_CTE resolved as shift
    ID              shift and go to state 66
    RETURN          shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74
    RCURLY          reduce using rule 101 (empty -> .)
    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14
    LPAREN          shift and go to state 68
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

  ! ID              [ reduce using rule 101 (empty -> .) ]
  ! RETURN          [ reduce using rule 101 (empty -> .) ]
  ! READ            [ reduce using rule 101 (empty -> .) ]
  ! WRITE           [ reduce using rule 101 (empty -> .) ]
  ! IF              [ reduce using rule 101 (empty -> .) ]
  ! WHILE           [ reduce using rule 101 (empty -> .) ]
  ! FOR             [ reduce using rule 101 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 101 (empty -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 101 (empty -> .) ]
  ! CHAR_TYPE       [ reduce using rule 101 (empty -> .) ]
  ! LPAREN          [ reduce using rule 101 (empty -> .) ]
  ! INT_CTE         [ reduce using rule 101 (empty -> .) ]
  ! FLOAT_CTE       [ reduce using rule 101 (empty -> .) ]

    estatutos                      shift and go to state 53
    asignacion                     shift and go to state 54
    declaracion                    shift and go to state 55
    llamada_func                   shift and go to state 56
    llamada_void                   shift and go to state 57
    retorno                        shift and go to state 58
    lectura                        shift and go to state 59
    escritura                      shift and go to state 60
    decision                       shift and go to state 61
    loop_cond                      shift and go to state 62
    loop_no_cond                   shift and go to state 63
    expresiones                    shift and go to state 64
    empty                          shift and go to state 65
    tipos                          shift and go to state 67
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80

state 48

    (14) def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN parametros . RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4

    RPAREN          shift and go to state 83


state 49

    (24) parametros -> tipos . COLON ID pn_func2 param_aux

    COLON           shift and go to state 84


state 50

    (4) dec_var_aux -> tipos COLON lista_ids . SEMIC dec_var_aux

    SEMIC           shift and go to state 85


state 51

    (9) lista_aux_b -> COMMA lista_ids .

    INT_TYPE        reduce using rule 9 (lista_aux_b -> COMMA lista_ids .)
    FLOAT_TYPE      reduce using rule 9 (lista_aux_b -> COMMA lista_ids .)
    CHAR_TYPE       reduce using rule 9 (lista_aux_b -> COMMA lista_ids .)
    FUNCTION        reduce using rule 9 (lista_aux_b -> COMMA lista_ids .)
    MAIN            reduce using rule 9 (lista_aux_b -> COMMA lista_ids .)
    SEMIC           reduce using rule 9 (lista_aux_b -> COMMA lista_ids .)


state 52

    (7) lista_aux -> LBRACK INT_CTE RBRACK .

    COMMA           reduce using rule 7 (lista_aux -> LBRACK INT_CTE RBRACK .)
    INT_TYPE        reduce using rule 7 (lista_aux -> LBRACK INT_CTE RBRACK .)
    FLOAT_TYPE      reduce using rule 7 (lista_aux -> LBRACK INT_CTE RBRACK .)
    CHAR_TYPE       reduce using rule 7 (lista_aux -> LBRACK INT_CTE RBRACK .)
    FUNCTION        reduce using rule 7 (lista_aux -> LBRACK INT_CTE RBRACK .)
    MAIN            reduce using rule 7 (lista_aux -> LBRACK INT_CTE RBRACK .)
    SEMIC           reduce using rule 7 (lista_aux -> LBRACK INT_CTE RBRACK .)


state 53

    (28) bloque -> LCURLY estatutos . estatu_rec RCURLY
    (29) estatu_rec -> . estatutos estatu_rec
    (30) estatu_rec -> . empty
    (31) estatutos -> . asignacion
    (32) estatutos -> . declaracion
    (33) estatutos -> . llamada_func
    (34) estatutos -> . llamada_void
    (35) estatutos -> . retorno
    (36) estatutos -> . lectura
    (37) estatutos -> . escritura
    (38) estatutos -> . decision
    (39) estatutos -> . loop_cond
    (40) estatutos -> . loop_no_cond
    (41) estatutos -> . expresiones
    (42) estatutos -> . empty
    (101) empty -> .
    (43) asignacion -> . ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC
    (44) declaracion -> . tipos ID pn_expresionID declaracion_aux SEMIC
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
    (52) llamada_void -> . ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC
    (57) retorno -> . RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC
    (58) lectura -> . READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5
    (61) escritura -> . WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5
    (67) decision -> . IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2
    (70) loop_cond -> . WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3
    (71) loop_no_cond -> . FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque
    (74) expresiones -> . t_exp or_check
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for CHAR_TYPE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_CTE resolved as shift
  ! shift/reduce conflict for FLOAT_CTE resolved as shift
    RCURLY          reduce using rule 101 (empty -> .)
    ID              shift and go to state 66
    RETURN          shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74
    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14
    LPAREN          shift and go to state 68
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

  ! ID              [ reduce using rule 101 (empty -> .) ]
  ! RETURN          [ reduce using rule 101 (empty -> .) ]
  ! READ            [ reduce using rule 101 (empty -> .) ]
  ! WRITE           [ reduce using rule 101 (empty -> .) ]
  ! IF              [ reduce using rule 101 (empty -> .) ]
  ! WHILE           [ reduce using rule 101 (empty -> .) ]
  ! FOR             [ reduce using rule 101 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 101 (empty -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 101 (empty -> .) ]
  ! CHAR_TYPE       [ reduce using rule 101 (empty -> .) ]
  ! LPAREN          [ reduce using rule 101 (empty -> .) ]
  ! INT_CTE         [ reduce using rule 101 (empty -> .) ]
  ! FLOAT_CTE       [ reduce using rule 101 (empty -> .) ]

    estatutos                      shift and go to state 86
    estatu_rec                     shift and go to state 87
    empty                          shift and go to state 88
    asignacion                     shift and go to state 54
    declaracion                    shift and go to state 55
    llamada_func                   shift and go to state 56
    llamada_void                   shift and go to state 57
    retorno                        shift and go to state 58
    lectura                        shift and go to state 59
    escritura                      shift and go to state 60
    decision                       shift and go to state 61
    loop_cond                      shift and go to state 62
    loop_no_cond                   shift and go to state 63
    expresiones                    shift and go to state 64
    tipos                          shift and go to state 67
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80

state 54

    (31) estatutos -> asignacion .

    ID              reduce using rule 31 (estatutos -> asignacion .)
    RETURN          reduce using rule 31 (estatutos -> asignacion .)
    READ            reduce using rule 31 (estatutos -> asignacion .)
    WRITE           reduce using rule 31 (estatutos -> asignacion .)
    IF              reduce using rule 31 (estatutos -> asignacion .)
    WHILE           reduce using rule 31 (estatutos -> asignacion .)
    FOR             reduce using rule 31 (estatutos -> asignacion .)
    INT_TYPE        reduce using rule 31 (estatutos -> asignacion .)
    FLOAT_TYPE      reduce using rule 31 (estatutos -> asignacion .)
    CHAR_TYPE       reduce using rule 31 (estatutos -> asignacion .)
    LPAREN          reduce using rule 31 (estatutos -> asignacion .)
    INT_CTE         reduce using rule 31 (estatutos -> asignacion .)
    FLOAT_CTE       reduce using rule 31 (estatutos -> asignacion .)
    RCURLY          reduce using rule 31 (estatutos -> asignacion .)


state 55

    (32) estatutos -> declaracion .

    ID              reduce using rule 32 (estatutos -> declaracion .)
    RETURN          reduce using rule 32 (estatutos -> declaracion .)
    READ            reduce using rule 32 (estatutos -> declaracion .)
    WRITE           reduce using rule 32 (estatutos -> declaracion .)
    IF              reduce using rule 32 (estatutos -> declaracion .)
    WHILE           reduce using rule 32 (estatutos -> declaracion .)
    FOR             reduce using rule 32 (estatutos -> declaracion .)
    INT_TYPE        reduce using rule 32 (estatutos -> declaracion .)
    FLOAT_TYPE      reduce using rule 32 (estatutos -> declaracion .)
    CHAR_TYPE       reduce using rule 32 (estatutos -> declaracion .)
    LPAREN          reduce using rule 32 (estatutos -> declaracion .)
    INT_CTE         reduce using rule 32 (estatutos -> declaracion .)
    FLOAT_CTE       reduce using rule 32 (estatutos -> declaracion .)
    RCURLY          reduce using rule 32 (estatutos -> declaracion .)


state 56

    (33) estatutos -> llamada_func .
    (98) factor -> llamada_func .

  ! reduce/reduce conflict for ID resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for RETURN resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for READ resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for WRITE resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for IF resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for WHILE resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for FOR resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for INT_TYPE resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for FLOAT_TYPE resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for CHAR_TYPE resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for LPAREN resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for INT_CTE resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for FLOAT_CTE resolved using rule 33 (estatutos -> llamada_func .)
  ! reduce/reduce conflict for RCURLY resolved using rule 33 (estatutos -> llamada_func .)
    ID              reduce using rule 33 (estatutos -> llamada_func .)
    RETURN          reduce using rule 33 (estatutos -> llamada_func .)
    READ            reduce using rule 33 (estatutos -> llamada_func .)
    WRITE           reduce using rule 33 (estatutos -> llamada_func .)
    IF              reduce using rule 33 (estatutos -> llamada_func .)
    WHILE           reduce using rule 33 (estatutos -> llamada_func .)
    FOR             reduce using rule 33 (estatutos -> llamada_func .)
    INT_TYPE        reduce using rule 33 (estatutos -> llamada_func .)
    FLOAT_TYPE      reduce using rule 33 (estatutos -> llamada_func .)
    CHAR_TYPE       reduce using rule 33 (estatutos -> llamada_func .)
    LPAREN          reduce using rule 33 (estatutos -> llamada_func .)
    INT_CTE         reduce using rule 33 (estatutos -> llamada_func .)
    FLOAT_CTE       reduce using rule 33 (estatutos -> llamada_func .)
    RCURLY          reduce using rule 33 (estatutos -> llamada_func .)
    MULT_OP         reduce using rule 98 (factor -> llamada_func .)
    DIV_OP          reduce using rule 98 (factor -> llamada_func .)
    PLUS_OP         reduce using rule 98 (factor -> llamada_func .)
    MINUS_OP        reduce using rule 98 (factor -> llamada_func .)
    GT_LOG          reduce using rule 98 (factor -> llamada_func .)
    LT_LOG          reduce using rule 98 (factor -> llamada_func .)
    EQUAL_LOG       reduce using rule 98 (factor -> llamada_func .)
    NE_LOG          reduce using rule 98 (factor -> llamada_func .)
    AND_LOG         reduce using rule 98 (factor -> llamada_func .)
    OR_LOG          reduce using rule 98 (factor -> llamada_func .)

  ! ID              [ reduce using rule 98 (factor -> llamada_func .) ]
  ! RETURN          [ reduce using rule 98 (factor -> llamada_func .) ]
  ! READ            [ reduce using rule 98 (factor -> llamada_func .) ]
  ! WRITE           [ reduce using rule 98 (factor -> llamada_func .) ]
  ! IF              [ reduce using rule 98 (factor -> llamada_func .) ]
  ! WHILE           [ reduce using rule 98 (factor -> llamada_func .) ]
  ! FOR             [ reduce using rule 98 (factor -> llamada_func .) ]
  ! INT_TYPE        [ reduce using rule 98 (factor -> llamada_func .) ]
  ! FLOAT_TYPE      [ reduce using rule 98 (factor -> llamada_func .) ]
  ! CHAR_TYPE       [ reduce using rule 98 (factor -> llamada_func .) ]
  ! LPAREN          [ reduce using rule 98 (factor -> llamada_func .) ]
  ! INT_CTE         [ reduce using rule 98 (factor -> llamada_func .) ]
  ! FLOAT_CTE       [ reduce using rule 98 (factor -> llamada_func .) ]
  ! RCURLY          [ reduce using rule 98 (factor -> llamada_func .) ]


state 57

    (34) estatutos -> llamada_void .

    ID              reduce using rule 34 (estatutos -> llamada_void .)
    RETURN          reduce using rule 34 (estatutos -> llamada_void .)
    READ            reduce using rule 34 (estatutos -> llamada_void .)
    WRITE           reduce using rule 34 (estatutos -> llamada_void .)
    IF              reduce using rule 34 (estatutos -> llamada_void .)
    WHILE           reduce using rule 34 (estatutos -> llamada_void .)
    FOR             reduce using rule 34 (estatutos -> llamada_void .)
    INT_TYPE        reduce using rule 34 (estatutos -> llamada_void .)
    FLOAT_TYPE      reduce using rule 34 (estatutos -> llamada_void .)
    CHAR_TYPE       reduce using rule 34 (estatutos -> llamada_void .)
    LPAREN          reduce using rule 34 (estatutos -> llamada_void .)
    INT_CTE         reduce using rule 34 (estatutos -> llamada_void .)
    FLOAT_CTE       reduce using rule 34 (estatutos -> llamada_void .)
    RCURLY          reduce using rule 34 (estatutos -> llamada_void .)


state 58

    (35) estatutos -> retorno .

    ID              reduce using rule 35 (estatutos -> retorno .)
    RETURN          reduce using rule 35 (estatutos -> retorno .)
    READ            reduce using rule 35 (estatutos -> retorno .)
    WRITE           reduce using rule 35 (estatutos -> retorno .)
    IF              reduce using rule 35 (estatutos -> retorno .)
    WHILE           reduce using rule 35 (estatutos -> retorno .)
    FOR             reduce using rule 35 (estatutos -> retorno .)
    INT_TYPE        reduce using rule 35 (estatutos -> retorno .)
    FLOAT_TYPE      reduce using rule 35 (estatutos -> retorno .)
    CHAR_TYPE       reduce using rule 35 (estatutos -> retorno .)
    LPAREN          reduce using rule 35 (estatutos -> retorno .)
    INT_CTE         reduce using rule 35 (estatutos -> retorno .)
    FLOAT_CTE       reduce using rule 35 (estatutos -> retorno .)
    RCURLY          reduce using rule 35 (estatutos -> retorno .)


state 59

    (36) estatutos -> lectura .

    ID              reduce using rule 36 (estatutos -> lectura .)
    RETURN          reduce using rule 36 (estatutos -> lectura .)
    READ            reduce using rule 36 (estatutos -> lectura .)
    WRITE           reduce using rule 36 (estatutos -> lectura .)
    IF              reduce using rule 36 (estatutos -> lectura .)
    WHILE           reduce using rule 36 (estatutos -> lectura .)
    FOR             reduce using rule 36 (estatutos -> lectura .)
    INT_TYPE        reduce using rule 36 (estatutos -> lectura .)
    FLOAT_TYPE      reduce using rule 36 (estatutos -> lectura .)
    CHAR_TYPE       reduce using rule 36 (estatutos -> lectura .)
    LPAREN          reduce using rule 36 (estatutos -> lectura .)
    INT_CTE         reduce using rule 36 (estatutos -> lectura .)
    FLOAT_CTE       reduce using rule 36 (estatutos -> lectura .)
    RCURLY          reduce using rule 36 (estatutos -> lectura .)


state 60

    (37) estatutos -> escritura .

    ID              reduce using rule 37 (estatutos -> escritura .)
    RETURN          reduce using rule 37 (estatutos -> escritura .)
    READ            reduce using rule 37 (estatutos -> escritura .)
    WRITE           reduce using rule 37 (estatutos -> escritura .)
    IF              reduce using rule 37 (estatutos -> escritura .)
    WHILE           reduce using rule 37 (estatutos -> escritura .)
    FOR             reduce using rule 37 (estatutos -> escritura .)
    INT_TYPE        reduce using rule 37 (estatutos -> escritura .)
    FLOAT_TYPE      reduce using rule 37 (estatutos -> escritura .)
    CHAR_TYPE       reduce using rule 37 (estatutos -> escritura .)
    LPAREN          reduce using rule 37 (estatutos -> escritura .)
    INT_CTE         reduce using rule 37 (estatutos -> escritura .)
    FLOAT_CTE       reduce using rule 37 (estatutos -> escritura .)
    RCURLY          reduce using rule 37 (estatutos -> escritura .)


state 61

    (38) estatutos -> decision .

    ID              reduce using rule 38 (estatutos -> decision .)
    RETURN          reduce using rule 38 (estatutos -> decision .)
    READ            reduce using rule 38 (estatutos -> decision .)
    WRITE           reduce using rule 38 (estatutos -> decision .)
    IF              reduce using rule 38 (estatutos -> decision .)
    WHILE           reduce using rule 38 (estatutos -> decision .)
    FOR             reduce using rule 38 (estatutos -> decision .)
    INT_TYPE        reduce using rule 38 (estatutos -> decision .)
    FLOAT_TYPE      reduce using rule 38 (estatutos -> decision .)
    CHAR_TYPE       reduce using rule 38 (estatutos -> decision .)
    LPAREN          reduce using rule 38 (estatutos -> decision .)
    INT_CTE         reduce using rule 38 (estatutos -> decision .)
    FLOAT_CTE       reduce using rule 38 (estatutos -> decision .)
    RCURLY          reduce using rule 38 (estatutos -> decision .)


state 62

    (39) estatutos -> loop_cond .

    ID              reduce using rule 39 (estatutos -> loop_cond .)
    RETURN          reduce using rule 39 (estatutos -> loop_cond .)
    READ            reduce using rule 39 (estatutos -> loop_cond .)
    WRITE           reduce using rule 39 (estatutos -> loop_cond .)
    IF              reduce using rule 39 (estatutos -> loop_cond .)
    WHILE           reduce using rule 39 (estatutos -> loop_cond .)
    FOR             reduce using rule 39 (estatutos -> loop_cond .)
    INT_TYPE        reduce using rule 39 (estatutos -> loop_cond .)
    FLOAT_TYPE      reduce using rule 39 (estatutos -> loop_cond .)
    CHAR_TYPE       reduce using rule 39 (estatutos -> loop_cond .)
    LPAREN          reduce using rule 39 (estatutos -> loop_cond .)
    INT_CTE         reduce using rule 39 (estatutos -> loop_cond .)
    FLOAT_CTE       reduce using rule 39 (estatutos -> loop_cond .)
    RCURLY          reduce using rule 39 (estatutos -> loop_cond .)


state 63

    (40) estatutos -> loop_no_cond .

    ID              reduce using rule 40 (estatutos -> loop_no_cond .)
    RETURN          reduce using rule 40 (estatutos -> loop_no_cond .)
    READ            reduce using rule 40 (estatutos -> loop_no_cond .)
    WRITE           reduce using rule 40 (estatutos -> loop_no_cond .)
    IF              reduce using rule 40 (estatutos -> loop_no_cond .)
    WHILE           reduce using rule 40 (estatutos -> loop_no_cond .)
    FOR             reduce using rule 40 (estatutos -> loop_no_cond .)
    INT_TYPE        reduce using rule 40 (estatutos -> loop_no_cond .)
    FLOAT_TYPE      reduce using rule 40 (estatutos -> loop_no_cond .)
    CHAR_TYPE       reduce using rule 40 (estatutos -> loop_no_cond .)
    LPAREN          reduce using rule 40 (estatutos -> loop_no_cond .)
    INT_CTE         reduce using rule 40 (estatutos -> loop_no_cond .)
    FLOAT_CTE       reduce using rule 40 (estatutos -> loop_no_cond .)
    RCURLY          reduce using rule 40 (estatutos -> loop_no_cond .)


state 64

    (41) estatutos -> expresiones .

    ID              reduce using rule 41 (estatutos -> expresiones .)
    RETURN          reduce using rule 41 (estatutos -> expresiones .)
    READ            reduce using rule 41 (estatutos -> expresiones .)
    WRITE           reduce using rule 41 (estatutos -> expresiones .)
    IF              reduce using rule 41 (estatutos -> expresiones .)
    WHILE           reduce using rule 41 (estatutos -> expresiones .)
    FOR             reduce using rule 41 (estatutos -> expresiones .)
    INT_TYPE        reduce using rule 41 (estatutos -> expresiones .)
    FLOAT_TYPE      reduce using rule 41 (estatutos -> expresiones .)
    CHAR_TYPE       reduce using rule 41 (estatutos -> expresiones .)
    LPAREN          reduce using rule 41 (estatutos -> expresiones .)
    INT_CTE         reduce using rule 41 (estatutos -> expresiones .)
    FLOAT_CTE       reduce using rule 41 (estatutos -> expresiones .)
    RCURLY          reduce using rule 41 (estatutos -> expresiones .)


state 65

    (42) estatutos -> empty .

    ID              reduce using rule 42 (estatutos -> empty .)
    RETURN          reduce using rule 42 (estatutos -> empty .)
    READ            reduce using rule 42 (estatutos -> empty .)
    WRITE           reduce using rule 42 (estatutos -> empty .)
    IF              reduce using rule 42 (estatutos -> empty .)
    WHILE           reduce using rule 42 (estatutos -> empty .)
    FOR             reduce using rule 42 (estatutos -> empty .)
    INT_TYPE        reduce using rule 42 (estatutos -> empty .)
    FLOAT_TYPE      reduce using rule 42 (estatutos -> empty .)
    CHAR_TYPE       reduce using rule 42 (estatutos -> empty .)
    LPAREN          reduce using rule 42 (estatutos -> empty .)
    INT_CTE         reduce using rule 42 (estatutos -> empty .)
    FLOAT_CTE       reduce using rule 42 (estatutos -> empty .)
    RCURLY          reduce using rule 42 (estatutos -> empty .)


state 66

    (43) asignacion -> ID . pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC
    (47) llamada_func -> ID . pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
    (52) llamada_void -> ID . pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC
    (97) factor -> ID .
    (104) pn_expresionID2 -> .
    (132) pn_llamFunc1 -> .

  ! reduce/reduce conflict for LPAREN resolved using rule 97 (factor -> ID .)
    MULT_OP         reduce using rule 97 (factor -> ID .)
    DIV_OP          reduce using rule 97 (factor -> ID .)
    PLUS_OP         reduce using rule 97 (factor -> ID .)
    MINUS_OP        reduce using rule 97 (factor -> ID .)
    GT_LOG          reduce using rule 97 (factor -> ID .)
    LT_LOG          reduce using rule 97 (factor -> ID .)
    EQUAL_LOG       reduce using rule 97 (factor -> ID .)
    NE_LOG          reduce using rule 97 (factor -> ID .)
    AND_LOG         reduce using rule 97 (factor -> ID .)
    OR_LOG          reduce using rule 97 (factor -> ID .)
    ID              reduce using rule 97 (factor -> ID .)
    RETURN          reduce using rule 97 (factor -> ID .)
    READ            reduce using rule 97 (factor -> ID .)
    WRITE           reduce using rule 97 (factor -> ID .)
    IF              reduce using rule 97 (factor -> ID .)
    WHILE           reduce using rule 97 (factor -> ID .)
    FOR             reduce using rule 97 (factor -> ID .)
    INT_TYPE        reduce using rule 97 (factor -> ID .)
    FLOAT_TYPE      reduce using rule 97 (factor -> ID .)
    CHAR_TYPE       reduce using rule 97 (factor -> ID .)
    LPAREN          reduce using rule 97 (factor -> ID .)
    INT_CTE         reduce using rule 97 (factor -> ID .)
    FLOAT_CTE       reduce using rule 97 (factor -> ID .)
    RCURLY          reduce using rule 97 (factor -> ID .)
    ASSIGN          reduce using rule 104 (pn_expresionID2 -> .)

  ! LPAREN          [ reduce using rule 132 (pn_llamFunc1 -> .) ]

    pn_expresionID2                shift and go to state 89
    pn_llamFunc1                   shift and go to state 90

state 67

    (44) declaracion -> tipos . ID pn_expresionID declaracion_aux SEMIC

    ID              shift and go to state 91


state 68

    (95) factor -> LPAREN . pn_expresion5 expresiones RPAREN pn_expresion6
    (109) pn_expresion5 -> .

    LPAREN          reduce using rule 109 (pn_expresion5 -> .)
    ID              reduce using rule 109 (pn_expresion5 -> .)
    INT_CTE         reduce using rule 109 (pn_expresion5 -> .)
    FLOAT_CTE       reduce using rule 109 (pn_expresion5 -> .)

    pn_expresion5                  shift and go to state 92

state 69

    (57) retorno -> RETURN . pn_secu3 LPAREN expresiones RPAREN SEMIC
    (117) pn_secu3 -> .

    LPAREN          reduce using rule 117 (pn_secu3 -> .)

    pn_secu3                       shift and go to state 93

state 70

    (58) lectura -> READ . pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5
    (117) pn_secu3 -> .

    LPAREN          reduce using rule 117 (pn_secu3 -> .)

    pn_secu3                       shift and go to state 94

state 71

    (61) escritura -> WRITE . pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5
    (117) pn_secu3 -> .

    LPAREN          reduce using rule 117 (pn_secu3 -> .)

    pn_secu3                       shift and go to state 95

state 72

    (67) decision -> IF . LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2

    LPAREN          shift and go to state 96


state 73

    (70) loop_cond -> WHILE . pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3
    (123) pn_loop1 -> .

    LPAREN          reduce using rule 123 (pn_loop1 -> .)

    pn_loop1                       shift and go to state 97

state 74

    (71) loop_no_cond -> FOR . ID nocond_aux ASSIGN expresiones TO expresiones DO bloque

    ID              shift and go to state 98


state 75

    (74) expresiones -> t_exp . or_check
    (75) or_check -> . OR_LOG pn_expresion9 expresiones pn_expresion10
    (76) or_check -> . empty
    (101) empty -> .

    OR_LOG          shift and go to state 100
    ID              reduce using rule 101 (empty -> .)
    RETURN          reduce using rule 101 (empty -> .)
    READ            reduce using rule 101 (empty -> .)
    WRITE           reduce using rule 101 (empty -> .)
    IF              reduce using rule 101 (empty -> .)
    WHILE           reduce using rule 101 (empty -> .)
    FOR             reduce using rule 101 (empty -> .)
    INT_TYPE        reduce using rule 101 (empty -> .)
    FLOAT_TYPE      reduce using rule 101 (empty -> .)
    CHAR_TYPE       reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    INT_CTE         reduce using rule 101 (empty -> .)
    FLOAT_CTE       reduce using rule 101 (empty -> .)
    RCURLY          reduce using rule 101 (empty -> .)
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)
    RBRACK          reduce using rule 101 (empty -> .)
    SEMIC           reduce using rule 101 (empty -> .)
    TO              reduce using rule 101 (empty -> .)
    DO              reduce using rule 101 (empty -> .)

    or_check                       shift and go to state 99
    empty                          shift and go to state 101

state 76

    (77) t_exp -> g_exp . and_check
    (78) and_check -> . AND_LOG pn_expresion9 t_exp pn_expresion10
    (79) and_check -> . empty
    (101) empty -> .

    AND_LOG         shift and go to state 103
    OR_LOG          reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)
    RETURN          reduce using rule 101 (empty -> .)
    READ            reduce using rule 101 (empty -> .)
    WRITE           reduce using rule 101 (empty -> .)
    IF              reduce using rule 101 (empty -> .)
    WHILE           reduce using rule 101 (empty -> .)
    FOR             reduce using rule 101 (empty -> .)
    INT_TYPE        reduce using rule 101 (empty -> .)
    FLOAT_TYPE      reduce using rule 101 (empty -> .)
    CHAR_TYPE       reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    INT_CTE         reduce using rule 101 (empty -> .)
    FLOAT_CTE       reduce using rule 101 (empty -> .)
    RCURLY          reduce using rule 101 (empty -> .)
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)
    RBRACK          reduce using rule 101 (empty -> .)
    SEMIC           reduce using rule 101 (empty -> .)
    TO              reduce using rule 101 (empty -> .)
    DO              reduce using rule 101 (empty -> .)

    and_check                      shift and go to state 102
    empty                          shift and go to state 104

state 77

    (80) g_exp -> m_exp . op_check
    (81) op_check -> . empty
    (82) op_check -> . comparacion m_exp pn_expresion8
    (101) empty -> .
    (83) comparacion -> . GT_LOG pn_expresion7
    (84) comparacion -> . LT_LOG pn_expresion7
    (85) comparacion -> . EQUAL_LOG pn_expresion7
    (86) comparacion -> . NE_LOG pn_expresion7

    AND_LOG         reduce using rule 101 (empty -> .)
    OR_LOG          reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)
    RETURN          reduce using rule 101 (empty -> .)
    READ            reduce using rule 101 (empty -> .)
    WRITE           reduce using rule 101 (empty -> .)
    IF              reduce using rule 101 (empty -> .)
    WHILE           reduce using rule 101 (empty -> .)
    FOR             reduce using rule 101 (empty -> .)
    INT_TYPE        reduce using rule 101 (empty -> .)
    FLOAT_TYPE      reduce using rule 101 (empty -> .)
    CHAR_TYPE       reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    INT_CTE         reduce using rule 101 (empty -> .)
    FLOAT_CTE       reduce using rule 101 (empty -> .)
    RCURLY          reduce using rule 101 (empty -> .)
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)
    RBRACK          reduce using rule 101 (empty -> .)
    SEMIC           reduce using rule 101 (empty -> .)
    TO              reduce using rule 101 (empty -> .)
    DO              reduce using rule 101 (empty -> .)
    GT_LOG          shift and go to state 108
    LT_LOG          shift and go to state 109
    EQUAL_LOG       shift and go to state 110
    NE_LOG          shift and go to state 111

    op_check                       shift and go to state 105
    empty                          shift and go to state 106
    comparacion                    shift and go to state 107

state 78

    (87) m_exp -> termino . pn_expresion3 m_rec
    (107) pn_expresion3 -> .

    PLUS_OP         reduce using rule 107 (pn_expresion3 -> .)
    MINUS_OP        reduce using rule 107 (pn_expresion3 -> .)
    GT_LOG          reduce using rule 107 (pn_expresion3 -> .)
    LT_LOG          reduce using rule 107 (pn_expresion3 -> .)
    EQUAL_LOG       reduce using rule 107 (pn_expresion3 -> .)
    NE_LOG          reduce using rule 107 (pn_expresion3 -> .)
    AND_LOG         reduce using rule 107 (pn_expresion3 -> .)
    OR_LOG          reduce using rule 107 (pn_expresion3 -> .)
    ID              reduce using rule 107 (pn_expresion3 -> .)
    RETURN          reduce using rule 107 (pn_expresion3 -> .)
    READ            reduce using rule 107 (pn_expresion3 -> .)
    WRITE           reduce using rule 107 (pn_expresion3 -> .)
    IF              reduce using rule 107 (pn_expresion3 -> .)
    WHILE           reduce using rule 107 (pn_expresion3 -> .)
    FOR             reduce using rule 107 (pn_expresion3 -> .)
    INT_TYPE        reduce using rule 107 (pn_expresion3 -> .)
    FLOAT_TYPE      reduce using rule 107 (pn_expresion3 -> .)
    CHAR_TYPE       reduce using rule 107 (pn_expresion3 -> .)
    LPAREN          reduce using rule 107 (pn_expresion3 -> .)
    INT_CTE         reduce using rule 107 (pn_expresion3 -> .)
    FLOAT_CTE       reduce using rule 107 (pn_expresion3 -> .)
    RCURLY          reduce using rule 107 (pn_expresion3 -> .)
    RPAREN          reduce using rule 107 (pn_expresion3 -> .)
    COMMA           reduce using rule 107 (pn_expresion3 -> .)
    RBRACK          reduce using rule 107 (pn_expresion3 -> .)
    SEMIC           reduce using rule 107 (pn_expresion3 -> .)
    TO              reduce using rule 107 (pn_expresion3 -> .)
    DO              reduce using rule 107 (pn_expresion3 -> .)

    pn_expresion3                  shift and go to state 112

state 79

    (91) termino -> factor . pn_expresion4 term_rec
    (108) pn_expresion4 -> .

    MULT_OP         reduce using rule 108 (pn_expresion4 -> .)
    DIV_OP          reduce using rule 108 (pn_expresion4 -> .)
    PLUS_OP         reduce using rule 108 (pn_expresion4 -> .)
    MINUS_OP        reduce using rule 108 (pn_expresion4 -> .)
    GT_LOG          reduce using rule 108 (pn_expresion4 -> .)
    LT_LOG          reduce using rule 108 (pn_expresion4 -> .)
    EQUAL_LOG       reduce using rule 108 (pn_expresion4 -> .)
    NE_LOG          reduce using rule 108 (pn_expresion4 -> .)
    AND_LOG         reduce using rule 108 (pn_expresion4 -> .)
    OR_LOG          reduce using rule 108 (pn_expresion4 -> .)
    ID              reduce using rule 108 (pn_expresion4 -> .)
    RETURN          reduce using rule 108 (pn_expresion4 -> .)
    READ            reduce using rule 108 (pn_expresion4 -> .)
    WRITE           reduce using rule 108 (pn_expresion4 -> .)
    IF              reduce using rule 108 (pn_expresion4 -> .)
    WHILE           reduce using rule 108 (pn_expresion4 -> .)
    FOR             reduce using rule 108 (pn_expresion4 -> .)
    INT_TYPE        reduce using rule 108 (pn_expresion4 -> .)
    FLOAT_TYPE      reduce using rule 108 (pn_expresion4 -> .)
    CHAR_TYPE       reduce using rule 108 (pn_expresion4 -> .)
    LPAREN          reduce using rule 108 (pn_expresion4 -> .)
    INT_CTE         reduce using rule 108 (pn_expresion4 -> .)
    FLOAT_CTE       reduce using rule 108 (pn_expresion4 -> .)
    RCURLY          reduce using rule 108 (pn_expresion4 -> .)
    RPAREN          reduce using rule 108 (pn_expresion4 -> .)
    COMMA           reduce using rule 108 (pn_expresion4 -> .)
    RBRACK          reduce using rule 108 (pn_expresion4 -> .)
    SEMIC           reduce using rule 108 (pn_expresion4 -> .)
    TO              reduce using rule 108 (pn_expresion4 -> .)
    DO              reduce using rule 108 (pn_expresion4 -> .)

    pn_expresion4                  shift and go to state 113

state 80

    (96) factor -> cte .

    MULT_OP         reduce using rule 96 (factor -> cte .)
    DIV_OP          reduce using rule 96 (factor -> cte .)
    PLUS_OP         reduce using rule 96 (factor -> cte .)
    MINUS_OP        reduce using rule 96 (factor -> cte .)
    GT_LOG          reduce using rule 96 (factor -> cte .)
    LT_LOG          reduce using rule 96 (factor -> cte .)
    EQUAL_LOG       reduce using rule 96 (factor -> cte .)
    NE_LOG          reduce using rule 96 (factor -> cte .)
    AND_LOG         reduce using rule 96 (factor -> cte .)
    OR_LOG          reduce using rule 96 (factor -> cte .)
    ID              reduce using rule 96 (factor -> cte .)
    RETURN          reduce using rule 96 (factor -> cte .)
    READ            reduce using rule 96 (factor -> cte .)
    WRITE           reduce using rule 96 (factor -> cte .)
    IF              reduce using rule 96 (factor -> cte .)
    WHILE           reduce using rule 96 (factor -> cte .)
    FOR             reduce using rule 96 (factor -> cte .)
    INT_TYPE        reduce using rule 96 (factor -> cte .)
    FLOAT_TYPE      reduce using rule 96 (factor -> cte .)
    CHAR_TYPE       reduce using rule 96 (factor -> cte .)
    LPAREN          reduce using rule 96 (factor -> cte .)
    INT_CTE         reduce using rule 96 (factor -> cte .)
    FLOAT_CTE       reduce using rule 96 (factor -> cte .)
    RCURLY          reduce using rule 96 (factor -> cte .)
    RPAREN          reduce using rule 96 (factor -> cte .)
    COMMA           reduce using rule 96 (factor -> cte .)
    RBRACK          reduce using rule 96 (factor -> cte .)
    SEMIC           reduce using rule 96 (factor -> cte .)
    TO              reduce using rule 96 (factor -> cte .)
    DO              reduce using rule 96 (factor -> cte .)


state 81

    (99) cte -> INT_CTE . pn_constante
    (136) pn_constante -> .

    MULT_OP         reduce using rule 136 (pn_constante -> .)
    DIV_OP          reduce using rule 136 (pn_constante -> .)
    PLUS_OP         reduce using rule 136 (pn_constante -> .)
    MINUS_OP        reduce using rule 136 (pn_constante -> .)
    GT_LOG          reduce using rule 136 (pn_constante -> .)
    LT_LOG          reduce using rule 136 (pn_constante -> .)
    EQUAL_LOG       reduce using rule 136 (pn_constante -> .)
    NE_LOG          reduce using rule 136 (pn_constante -> .)
    AND_LOG         reduce using rule 136 (pn_constante -> .)
    OR_LOG          reduce using rule 136 (pn_constante -> .)
    ID              reduce using rule 136 (pn_constante -> .)
    RETURN          reduce using rule 136 (pn_constante -> .)
    READ            reduce using rule 136 (pn_constante -> .)
    WRITE           reduce using rule 136 (pn_constante -> .)
    IF              reduce using rule 136 (pn_constante -> .)
    WHILE           reduce using rule 136 (pn_constante -> .)
    FOR             reduce using rule 136 (pn_constante -> .)
    INT_TYPE        reduce using rule 136 (pn_constante -> .)
    FLOAT_TYPE      reduce using rule 136 (pn_constante -> .)
    CHAR_TYPE       reduce using rule 136 (pn_constante -> .)
    LPAREN          reduce using rule 136 (pn_constante -> .)
    INT_CTE         reduce using rule 136 (pn_constante -> .)
    FLOAT_CTE       reduce using rule 136 (pn_constante -> .)
    RCURLY          reduce using rule 136 (pn_constante -> .)
    RPAREN          reduce using rule 136 (pn_constante -> .)
    COMMA           reduce using rule 136 (pn_constante -> .)
    RBRACK          reduce using rule 136 (pn_constante -> .)
    SEMIC           reduce using rule 136 (pn_constante -> .)
    TO              reduce using rule 136 (pn_constante -> .)
    DO              reduce using rule 136 (pn_constante -> .)

    pn_constante                   shift and go to state 114

state 82

    (100) cte -> FLOAT_CTE . pn_constante
    (136) pn_constante -> .

    MULT_OP         reduce using rule 136 (pn_constante -> .)
    DIV_OP          reduce using rule 136 (pn_constante -> .)
    PLUS_OP         reduce using rule 136 (pn_constante -> .)
    MINUS_OP        reduce using rule 136 (pn_constante -> .)
    GT_LOG          reduce using rule 136 (pn_constante -> .)
    LT_LOG          reduce using rule 136 (pn_constante -> .)
    EQUAL_LOG       reduce using rule 136 (pn_constante -> .)
    NE_LOG          reduce using rule 136 (pn_constante -> .)
    AND_LOG         reduce using rule 136 (pn_constante -> .)
    OR_LOG          reduce using rule 136 (pn_constante -> .)
    ID              reduce using rule 136 (pn_constante -> .)
    RETURN          reduce using rule 136 (pn_constante -> .)
    READ            reduce using rule 136 (pn_constante -> .)
    WRITE           reduce using rule 136 (pn_constante -> .)
    IF              reduce using rule 136 (pn_constante -> .)
    WHILE           reduce using rule 136 (pn_constante -> .)
    FOR             reduce using rule 136 (pn_constante -> .)
    INT_TYPE        reduce using rule 136 (pn_constante -> .)
    FLOAT_TYPE      reduce using rule 136 (pn_constante -> .)
    CHAR_TYPE       reduce using rule 136 (pn_constante -> .)
    LPAREN          reduce using rule 136 (pn_constante -> .)
    INT_CTE         reduce using rule 136 (pn_constante -> .)
    FLOAT_CTE       reduce using rule 136 (pn_constante -> .)
    RCURLY          reduce using rule 136 (pn_constante -> .)
    RPAREN          reduce using rule 136 (pn_constante -> .)
    COMMA           reduce using rule 136 (pn_constante -> .)
    RBRACK          reduce using rule 136 (pn_constante -> .)
    SEMIC           reduce using rule 136 (pn_constante -> .)
    TO              reduce using rule 136 (pn_constante -> .)
    DO              reduce using rule 136 (pn_constante -> .)

    pn_constante                   shift and go to state 115

state 83

    (14) def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN parametros RPAREN . pn_func3 SEMIC dec_var_loc bloque pn_func4
    (130) pn_func3 -> .

    SEMIC           reduce using rule 130 (pn_func3 -> .)

    pn_func3                       shift and go to state 116

state 84

    (24) parametros -> tipos COLON . ID pn_func2 param_aux

    ID              shift and go to state 117


state 85

    (4) dec_var_aux -> tipos COLON lista_ids SEMIC . dec_var_aux
    (4) dec_var_aux -> . tipos COLON lista_ids SEMIC dec_var_aux
    (5) dec_var_aux -> . empty
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct
    (101) empty -> .

    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14
    FUNCTION        reduce using rule 101 (empty -> .)
    MAIN            reduce using rule 101 (empty -> .)

    tipos                          shift and go to state 33
    dec_var_aux                    shift and go to state 118
    empty                          shift and go to state 35

state 86

    (29) estatu_rec -> estatutos . estatu_rec
    (29) estatu_rec -> . estatutos estatu_rec
    (30) estatu_rec -> . empty
    (31) estatutos -> . asignacion
    (32) estatutos -> . declaracion
    (33) estatutos -> . llamada_func
    (34) estatutos -> . llamada_void
    (35) estatutos -> . retorno
    (36) estatutos -> . lectura
    (37) estatutos -> . escritura
    (38) estatutos -> . decision
    (39) estatutos -> . loop_cond
    (40) estatutos -> . loop_no_cond
    (41) estatutos -> . expresiones
    (42) estatutos -> . empty
    (101) empty -> .
    (43) asignacion -> . ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC
    (44) declaracion -> . tipos ID pn_expresionID declaracion_aux SEMIC
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
    (52) llamada_void -> . ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC
    (57) retorno -> . RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC
    (58) lectura -> . READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5
    (61) escritura -> . WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5
    (67) decision -> . IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2
    (70) loop_cond -> . WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3
    (71) loop_no_cond -> . FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque
    (74) expresiones -> . t_exp or_check
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for CHAR_TYPE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_CTE resolved as shift
  ! shift/reduce conflict for FLOAT_CTE resolved as shift
    RCURLY          reduce using rule 101 (empty -> .)
    ID              shift and go to state 66
    RETURN          shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74
    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14
    LPAREN          shift and go to state 68
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

  ! ID              [ reduce using rule 101 (empty -> .) ]
  ! RETURN          [ reduce using rule 101 (empty -> .) ]
  ! READ            [ reduce using rule 101 (empty -> .) ]
  ! WRITE           [ reduce using rule 101 (empty -> .) ]
  ! IF              [ reduce using rule 101 (empty -> .) ]
  ! WHILE           [ reduce using rule 101 (empty -> .) ]
  ! FOR             [ reduce using rule 101 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 101 (empty -> .) ]
  ! FLOAT_TYPE      [ reduce using rule 101 (empty -> .) ]
  ! CHAR_TYPE       [ reduce using rule 101 (empty -> .) ]
  ! LPAREN          [ reduce using rule 101 (empty -> .) ]
  ! INT_CTE         [ reduce using rule 101 (empty -> .) ]
  ! FLOAT_CTE       [ reduce using rule 101 (empty -> .) ]

    estatutos                      shift and go to state 86
    estatu_rec                     shift and go to state 119
    empty                          shift and go to state 88
    asignacion                     shift and go to state 54
    declaracion                    shift and go to state 55
    llamada_func                   shift and go to state 56
    llamada_void                   shift and go to state 57
    retorno                        shift and go to state 58
    lectura                        shift and go to state 59
    escritura                      shift and go to state 60
    decision                       shift and go to state 61
    loop_cond                      shift and go to state 62
    loop_no_cond                   shift and go to state 63
    expresiones                    shift and go to state 64
    tipos                          shift and go to state 67
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80

state 87

    (28) bloque -> LCURLY estatutos estatu_rec . RCURLY

    RCURLY          shift and go to state 120


state 88

    (30) estatu_rec -> empty .
    (42) estatutos -> empty .

  ! reduce/reduce conflict for RCURLY resolved using rule 30 (estatu_rec -> empty .)
    RCURLY          reduce using rule 30 (estatu_rec -> empty .)
    ID              reduce using rule 42 (estatutos -> empty .)
    RETURN          reduce using rule 42 (estatutos -> empty .)
    READ            reduce using rule 42 (estatutos -> empty .)
    WRITE           reduce using rule 42 (estatutos -> empty .)
    IF              reduce using rule 42 (estatutos -> empty .)
    WHILE           reduce using rule 42 (estatutos -> empty .)
    FOR             reduce using rule 42 (estatutos -> empty .)
    INT_TYPE        reduce using rule 42 (estatutos -> empty .)
    FLOAT_TYPE      reduce using rule 42 (estatutos -> empty .)
    CHAR_TYPE       reduce using rule 42 (estatutos -> empty .)
    LPAREN          reduce using rule 42 (estatutos -> empty .)
    INT_CTE         reduce using rule 42 (estatutos -> empty .)
    FLOAT_CTE       reduce using rule 42 (estatutos -> empty .)

  ! RCURLY          [ reduce using rule 42 (estatutos -> empty .) ]


state 89

    (43) asignacion -> ID pn_expresionID2 . ASSIGN pn_secu1 expresiones pn_secu2 SEMIC

    ASSIGN          shift and go to state 121


state 90

    (47) llamada_func -> ID pn_llamFunc1 . LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
    (52) llamada_void -> ID pn_llamFunc1 . LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 122


state 91

    (44) declaracion -> tipos ID . pn_expresionID declaracion_aux SEMIC
    (103) pn_expresionID -> .

    ASSIGN          reduce using rule 103 (pn_expresionID -> .)
    SEMIC           reduce using rule 103 (pn_expresionID -> .)

    pn_expresionID                 shift and go to state 123

state 92

    (95) factor -> LPAREN pn_expresion5 . expresiones RPAREN pn_expresion6
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 124
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 93

    (57) retorno -> RETURN pn_secu3 . LPAREN expresiones RPAREN SEMIC

    LPAREN          shift and go to state 127


state 94

    (58) lectura -> READ pn_secu3 . LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5

    LPAREN          shift and go to state 128


state 95

    (61) escritura -> WRITE pn_secu3 . LPAREN esc_aux RPAREN SEMIC pn_secu5

    LPAREN          shift and go to state 129


state 96

    (67) decision -> IF LPAREN . expresiones RPAREN pn_cond1 THEN bloque else pn_cond2
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 130
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 97

    (70) loop_cond -> WHILE pn_loop1 . LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3

    LPAREN          shift and go to state 131


state 98

    (71) loop_no_cond -> FOR ID . nocond_aux ASSIGN expresiones TO expresiones DO bloque
    (72) nocond_aux -> . LBRACK expresiones RBRACK
    (73) nocond_aux -> . empty
    (101) empty -> .

    LBRACK          shift and go to state 133
    ASSIGN          reduce using rule 101 (empty -> .)

    nocond_aux                     shift and go to state 132
    empty                          shift and go to state 134

state 99

    (74) expresiones -> t_exp or_check .

    ID              reduce using rule 74 (expresiones -> t_exp or_check .)
    RETURN          reduce using rule 74 (expresiones -> t_exp or_check .)
    READ            reduce using rule 74 (expresiones -> t_exp or_check .)
    WRITE           reduce using rule 74 (expresiones -> t_exp or_check .)
    IF              reduce using rule 74 (expresiones -> t_exp or_check .)
    WHILE           reduce using rule 74 (expresiones -> t_exp or_check .)
    FOR             reduce using rule 74 (expresiones -> t_exp or_check .)
    INT_TYPE        reduce using rule 74 (expresiones -> t_exp or_check .)
    FLOAT_TYPE      reduce using rule 74 (expresiones -> t_exp or_check .)
    CHAR_TYPE       reduce using rule 74 (expresiones -> t_exp or_check .)
    LPAREN          reduce using rule 74 (expresiones -> t_exp or_check .)
    INT_CTE         reduce using rule 74 (expresiones -> t_exp or_check .)
    FLOAT_CTE       reduce using rule 74 (expresiones -> t_exp or_check .)
    RCURLY          reduce using rule 74 (expresiones -> t_exp or_check .)
    RPAREN          reduce using rule 74 (expresiones -> t_exp or_check .)
    COMMA           reduce using rule 74 (expresiones -> t_exp or_check .)
    RBRACK          reduce using rule 74 (expresiones -> t_exp or_check .)
    SEMIC           reduce using rule 74 (expresiones -> t_exp or_check .)
    TO              reduce using rule 74 (expresiones -> t_exp or_check .)
    DO              reduce using rule 74 (expresiones -> t_exp or_check .)


state 100

    (75) or_check -> OR_LOG . pn_expresion9 expresiones pn_expresion10
    (113) pn_expresion9 -> .

    LPAREN          reduce using rule 113 (pn_expresion9 -> .)
    ID              reduce using rule 113 (pn_expresion9 -> .)
    INT_CTE         reduce using rule 113 (pn_expresion9 -> .)
    FLOAT_CTE       reduce using rule 113 (pn_expresion9 -> .)

    pn_expresion9                  shift and go to state 135

state 101

    (76) or_check -> empty .

    ID              reduce using rule 76 (or_check -> empty .)
    RETURN          reduce using rule 76 (or_check -> empty .)
    READ            reduce using rule 76 (or_check -> empty .)
    WRITE           reduce using rule 76 (or_check -> empty .)
    IF              reduce using rule 76 (or_check -> empty .)
    WHILE           reduce using rule 76 (or_check -> empty .)
    FOR             reduce using rule 76 (or_check -> empty .)
    INT_TYPE        reduce using rule 76 (or_check -> empty .)
    FLOAT_TYPE      reduce using rule 76 (or_check -> empty .)
    CHAR_TYPE       reduce using rule 76 (or_check -> empty .)
    LPAREN          reduce using rule 76 (or_check -> empty .)
    INT_CTE         reduce using rule 76 (or_check -> empty .)
    FLOAT_CTE       reduce using rule 76 (or_check -> empty .)
    RCURLY          reduce using rule 76 (or_check -> empty .)
    RPAREN          reduce using rule 76 (or_check -> empty .)
    COMMA           reduce using rule 76 (or_check -> empty .)
    RBRACK          reduce using rule 76 (or_check -> empty .)
    SEMIC           reduce using rule 76 (or_check -> empty .)
    TO              reduce using rule 76 (or_check -> empty .)
    DO              reduce using rule 76 (or_check -> empty .)


state 102

    (77) t_exp -> g_exp and_check .

    OR_LOG          reduce using rule 77 (t_exp -> g_exp and_check .)
    ID              reduce using rule 77 (t_exp -> g_exp and_check .)
    RETURN          reduce using rule 77 (t_exp -> g_exp and_check .)
    READ            reduce using rule 77 (t_exp -> g_exp and_check .)
    WRITE           reduce using rule 77 (t_exp -> g_exp and_check .)
    IF              reduce using rule 77 (t_exp -> g_exp and_check .)
    WHILE           reduce using rule 77 (t_exp -> g_exp and_check .)
    FOR             reduce using rule 77 (t_exp -> g_exp and_check .)
    INT_TYPE        reduce using rule 77 (t_exp -> g_exp and_check .)
    FLOAT_TYPE      reduce using rule 77 (t_exp -> g_exp and_check .)
    CHAR_TYPE       reduce using rule 77 (t_exp -> g_exp and_check .)
    LPAREN          reduce using rule 77 (t_exp -> g_exp and_check .)
    INT_CTE         reduce using rule 77 (t_exp -> g_exp and_check .)
    FLOAT_CTE       reduce using rule 77 (t_exp -> g_exp and_check .)
    RCURLY          reduce using rule 77 (t_exp -> g_exp and_check .)
    RPAREN          reduce using rule 77 (t_exp -> g_exp and_check .)
    COMMA           reduce using rule 77 (t_exp -> g_exp and_check .)
    RBRACK          reduce using rule 77 (t_exp -> g_exp and_check .)
    SEMIC           reduce using rule 77 (t_exp -> g_exp and_check .)
    TO              reduce using rule 77 (t_exp -> g_exp and_check .)
    DO              reduce using rule 77 (t_exp -> g_exp and_check .)


state 103

    (78) and_check -> AND_LOG . pn_expresion9 t_exp pn_expresion10
    (113) pn_expresion9 -> .

    LPAREN          reduce using rule 113 (pn_expresion9 -> .)
    ID              reduce using rule 113 (pn_expresion9 -> .)
    INT_CTE         reduce using rule 113 (pn_expresion9 -> .)
    FLOAT_CTE       reduce using rule 113 (pn_expresion9 -> .)

    pn_expresion9                  shift and go to state 136

state 104

    (79) and_check -> empty .

    OR_LOG          reduce using rule 79 (and_check -> empty .)
    ID              reduce using rule 79 (and_check -> empty .)
    RETURN          reduce using rule 79 (and_check -> empty .)
    READ            reduce using rule 79 (and_check -> empty .)
    WRITE           reduce using rule 79 (and_check -> empty .)
    IF              reduce using rule 79 (and_check -> empty .)
    WHILE           reduce using rule 79 (and_check -> empty .)
    FOR             reduce using rule 79 (and_check -> empty .)
    INT_TYPE        reduce using rule 79 (and_check -> empty .)
    FLOAT_TYPE      reduce using rule 79 (and_check -> empty .)
    CHAR_TYPE       reduce using rule 79 (and_check -> empty .)
    LPAREN          reduce using rule 79 (and_check -> empty .)
    INT_CTE         reduce using rule 79 (and_check -> empty .)
    FLOAT_CTE       reduce using rule 79 (and_check -> empty .)
    RCURLY          reduce using rule 79 (and_check -> empty .)
    RPAREN          reduce using rule 79 (and_check -> empty .)
    COMMA           reduce using rule 79 (and_check -> empty .)
    RBRACK          reduce using rule 79 (and_check -> empty .)
    SEMIC           reduce using rule 79 (and_check -> empty .)
    TO              reduce using rule 79 (and_check -> empty .)
    DO              reduce using rule 79 (and_check -> empty .)


state 105

    (80) g_exp -> m_exp op_check .

    AND_LOG         reduce using rule 80 (g_exp -> m_exp op_check .)
    OR_LOG          reduce using rule 80 (g_exp -> m_exp op_check .)
    ID              reduce using rule 80 (g_exp -> m_exp op_check .)
    RETURN          reduce using rule 80 (g_exp -> m_exp op_check .)
    READ            reduce using rule 80 (g_exp -> m_exp op_check .)
    WRITE           reduce using rule 80 (g_exp -> m_exp op_check .)
    IF              reduce using rule 80 (g_exp -> m_exp op_check .)
    WHILE           reduce using rule 80 (g_exp -> m_exp op_check .)
    FOR             reduce using rule 80 (g_exp -> m_exp op_check .)
    INT_TYPE        reduce using rule 80 (g_exp -> m_exp op_check .)
    FLOAT_TYPE      reduce using rule 80 (g_exp -> m_exp op_check .)
    CHAR_TYPE       reduce using rule 80 (g_exp -> m_exp op_check .)
    LPAREN          reduce using rule 80 (g_exp -> m_exp op_check .)
    INT_CTE         reduce using rule 80 (g_exp -> m_exp op_check .)
    FLOAT_CTE       reduce using rule 80 (g_exp -> m_exp op_check .)
    RCURLY          reduce using rule 80 (g_exp -> m_exp op_check .)
    RPAREN          reduce using rule 80 (g_exp -> m_exp op_check .)
    COMMA           reduce using rule 80 (g_exp -> m_exp op_check .)
    RBRACK          reduce using rule 80 (g_exp -> m_exp op_check .)
    SEMIC           reduce using rule 80 (g_exp -> m_exp op_check .)
    TO              reduce using rule 80 (g_exp -> m_exp op_check .)
    DO              reduce using rule 80 (g_exp -> m_exp op_check .)


state 106

    (81) op_check -> empty .

    AND_LOG         reduce using rule 81 (op_check -> empty .)
    OR_LOG          reduce using rule 81 (op_check -> empty .)
    ID              reduce using rule 81 (op_check -> empty .)
    RETURN          reduce using rule 81 (op_check -> empty .)
    READ            reduce using rule 81 (op_check -> empty .)
    WRITE           reduce using rule 81 (op_check -> empty .)
    IF              reduce using rule 81 (op_check -> empty .)
    WHILE           reduce using rule 81 (op_check -> empty .)
    FOR             reduce using rule 81 (op_check -> empty .)
    INT_TYPE        reduce using rule 81 (op_check -> empty .)
    FLOAT_TYPE      reduce using rule 81 (op_check -> empty .)
    CHAR_TYPE       reduce using rule 81 (op_check -> empty .)
    LPAREN          reduce using rule 81 (op_check -> empty .)
    INT_CTE         reduce using rule 81 (op_check -> empty .)
    FLOAT_CTE       reduce using rule 81 (op_check -> empty .)
    RCURLY          reduce using rule 81 (op_check -> empty .)
    RPAREN          reduce using rule 81 (op_check -> empty .)
    COMMA           reduce using rule 81 (op_check -> empty .)
    RBRACK          reduce using rule 81 (op_check -> empty .)
    SEMIC           reduce using rule 81 (op_check -> empty .)
    TO              reduce using rule 81 (op_check -> empty .)
    DO              reduce using rule 81 (op_check -> empty .)


state 107

    (82) op_check -> comparacion . m_exp pn_expresion8
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    m_exp                          shift and go to state 137
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 108

    (83) comparacion -> GT_LOG . pn_expresion7
    (111) pn_expresion7 -> .

    LPAREN          reduce using rule 111 (pn_expresion7 -> .)
    ID              reduce using rule 111 (pn_expresion7 -> .)
    INT_CTE         reduce using rule 111 (pn_expresion7 -> .)
    FLOAT_CTE       reduce using rule 111 (pn_expresion7 -> .)

    pn_expresion7                  shift and go to state 138

state 109

    (84) comparacion -> LT_LOG . pn_expresion7
    (111) pn_expresion7 -> .

    LPAREN          reduce using rule 111 (pn_expresion7 -> .)
    ID              reduce using rule 111 (pn_expresion7 -> .)
    INT_CTE         reduce using rule 111 (pn_expresion7 -> .)
    FLOAT_CTE       reduce using rule 111 (pn_expresion7 -> .)

    pn_expresion7                  shift and go to state 139

state 110

    (85) comparacion -> EQUAL_LOG . pn_expresion7
    (111) pn_expresion7 -> .

    LPAREN          reduce using rule 111 (pn_expresion7 -> .)
    ID              reduce using rule 111 (pn_expresion7 -> .)
    INT_CTE         reduce using rule 111 (pn_expresion7 -> .)
    FLOAT_CTE       reduce using rule 111 (pn_expresion7 -> .)

    pn_expresion7                  shift and go to state 140

state 111

    (86) comparacion -> NE_LOG . pn_expresion7
    (111) pn_expresion7 -> .

    LPAREN          reduce using rule 111 (pn_expresion7 -> .)
    ID              reduce using rule 111 (pn_expresion7 -> .)
    INT_CTE         reduce using rule 111 (pn_expresion7 -> .)
    FLOAT_CTE       reduce using rule 111 (pn_expresion7 -> .)

    pn_expresion7                  shift and go to state 141

state 112

    (87) m_exp -> termino pn_expresion3 . m_rec
    (88) m_rec -> . PLUS_OP pn_expresion1 m_exp
    (89) m_rec -> . MINUS_OP pn_expresion1 m_exp
    (90) m_rec -> . empty
    (101) empty -> .

    PLUS_OP         shift and go to state 143
    MINUS_OP        shift and go to state 144
    GT_LOG          reduce using rule 101 (empty -> .)
    LT_LOG          reduce using rule 101 (empty -> .)
    EQUAL_LOG       reduce using rule 101 (empty -> .)
    NE_LOG          reduce using rule 101 (empty -> .)
    AND_LOG         reduce using rule 101 (empty -> .)
    OR_LOG          reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)
    RETURN          reduce using rule 101 (empty -> .)
    READ            reduce using rule 101 (empty -> .)
    WRITE           reduce using rule 101 (empty -> .)
    IF              reduce using rule 101 (empty -> .)
    WHILE           reduce using rule 101 (empty -> .)
    FOR             reduce using rule 101 (empty -> .)
    INT_TYPE        reduce using rule 101 (empty -> .)
    FLOAT_TYPE      reduce using rule 101 (empty -> .)
    CHAR_TYPE       reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    INT_CTE         reduce using rule 101 (empty -> .)
    FLOAT_CTE       reduce using rule 101 (empty -> .)
    RCURLY          reduce using rule 101 (empty -> .)
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)
    RBRACK          reduce using rule 101 (empty -> .)
    SEMIC           reduce using rule 101 (empty -> .)
    TO              reduce using rule 101 (empty -> .)
    DO              reduce using rule 101 (empty -> .)

    m_rec                          shift and go to state 142
    empty                          shift and go to state 145

state 113

    (91) termino -> factor pn_expresion4 . term_rec
    (92) term_rec -> . MULT_OP pn_expresion2 termino
    (93) term_rec -> . DIV_OP pn_expresion2 termino
    (94) term_rec -> . empty
    (101) empty -> .

    MULT_OP         shift and go to state 147
    DIV_OP          shift and go to state 148
    PLUS_OP         reduce using rule 101 (empty -> .)
    MINUS_OP        reduce using rule 101 (empty -> .)
    GT_LOG          reduce using rule 101 (empty -> .)
    LT_LOG          reduce using rule 101 (empty -> .)
    EQUAL_LOG       reduce using rule 101 (empty -> .)
    NE_LOG          reduce using rule 101 (empty -> .)
    AND_LOG         reduce using rule 101 (empty -> .)
    OR_LOG          reduce using rule 101 (empty -> .)
    ID              reduce using rule 101 (empty -> .)
    RETURN          reduce using rule 101 (empty -> .)
    READ            reduce using rule 101 (empty -> .)
    WRITE           reduce using rule 101 (empty -> .)
    IF              reduce using rule 101 (empty -> .)
    WHILE           reduce using rule 101 (empty -> .)
    FOR             reduce using rule 101 (empty -> .)
    INT_TYPE        reduce using rule 101 (empty -> .)
    FLOAT_TYPE      reduce using rule 101 (empty -> .)
    CHAR_TYPE       reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    INT_CTE         reduce using rule 101 (empty -> .)
    FLOAT_CTE       reduce using rule 101 (empty -> .)
    RCURLY          reduce using rule 101 (empty -> .)
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)
    RBRACK          reduce using rule 101 (empty -> .)
    SEMIC           reduce using rule 101 (empty -> .)
    TO              reduce using rule 101 (empty -> .)
    DO              reduce using rule 101 (empty -> .)

    term_rec                       shift and go to state 146
    empty                          shift and go to state 149

state 114

    (99) cte -> INT_CTE pn_constante .

    MULT_OP         reduce using rule 99 (cte -> INT_CTE pn_constante .)
    DIV_OP          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    PLUS_OP         reduce using rule 99 (cte -> INT_CTE pn_constante .)
    MINUS_OP        reduce using rule 99 (cte -> INT_CTE pn_constante .)
    GT_LOG          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    LT_LOG          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    EQUAL_LOG       reduce using rule 99 (cte -> INT_CTE pn_constante .)
    NE_LOG          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    AND_LOG         reduce using rule 99 (cte -> INT_CTE pn_constante .)
    OR_LOG          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    ID              reduce using rule 99 (cte -> INT_CTE pn_constante .)
    RETURN          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    READ            reduce using rule 99 (cte -> INT_CTE pn_constante .)
    WRITE           reduce using rule 99 (cte -> INT_CTE pn_constante .)
    IF              reduce using rule 99 (cte -> INT_CTE pn_constante .)
    WHILE           reduce using rule 99 (cte -> INT_CTE pn_constante .)
    FOR             reduce using rule 99 (cte -> INT_CTE pn_constante .)
    INT_TYPE        reduce using rule 99 (cte -> INT_CTE pn_constante .)
    FLOAT_TYPE      reduce using rule 99 (cte -> INT_CTE pn_constante .)
    CHAR_TYPE       reduce using rule 99 (cte -> INT_CTE pn_constante .)
    LPAREN          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    INT_CTE         reduce using rule 99 (cte -> INT_CTE pn_constante .)
    FLOAT_CTE       reduce using rule 99 (cte -> INT_CTE pn_constante .)
    RCURLY          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    RPAREN          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    COMMA           reduce using rule 99 (cte -> INT_CTE pn_constante .)
    RBRACK          reduce using rule 99 (cte -> INT_CTE pn_constante .)
    SEMIC           reduce using rule 99 (cte -> INT_CTE pn_constante .)
    TO              reduce using rule 99 (cte -> INT_CTE pn_constante .)
    DO              reduce using rule 99 (cte -> INT_CTE pn_constante .)


state 115

    (100) cte -> FLOAT_CTE pn_constante .

    MULT_OP         reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    DIV_OP          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    PLUS_OP         reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    MINUS_OP        reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    GT_LOG          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    LT_LOG          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    EQUAL_LOG       reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    NE_LOG          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    AND_LOG         reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    OR_LOG          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    ID              reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    RETURN          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    READ            reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    WRITE           reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    IF              reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    WHILE           reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    FOR             reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    INT_TYPE        reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    FLOAT_TYPE      reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    CHAR_TYPE       reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    LPAREN          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    INT_CTE         reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    FLOAT_CTE       reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    RCURLY          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    RPAREN          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    COMMA           reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    RBRACK          reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    SEMIC           reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    TO              reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)
    DO              reduce using rule 100 (cte -> FLOAT_CTE pn_constante .)


state 116

    (14) def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN parametros RPAREN pn_func3 . SEMIC dec_var_loc bloque pn_func4

    SEMIC           shift and go to state 150


state 117

    (24) parametros -> tipos COLON ID . pn_func2 param_aux
    (129) pn_func2 -> .

    COMMA           reduce using rule 129 (pn_func2 -> .)
    RPAREN          reduce using rule 129 (pn_func2 -> .)

    pn_func2                       shift and go to state 151

state 118

    (4) dec_var_aux -> tipos COLON lista_ids SEMIC dec_var_aux .

    FUNCTION        reduce using rule 4 (dec_var_aux -> tipos COLON lista_ids SEMIC dec_var_aux .)
    MAIN            reduce using rule 4 (dec_var_aux -> tipos COLON lista_ids SEMIC dec_var_aux .)


state 119

    (29) estatu_rec -> estatutos estatu_rec .

    RCURLY          reduce using rule 29 (estatu_rec -> estatutos estatu_rec .)


state 120

    (28) bloque -> LCURLY estatutos estatu_rec RCURLY .

    $end            reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    MAIN            reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    ELSE            reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    ID              reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    RETURN          reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    READ            reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    WRITE           reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    IF              reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    WHILE           reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    FOR             reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    INT_TYPE        reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    FLOAT_TYPE      reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    CHAR_TYPE       reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    LPAREN          reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    INT_CTE         reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    FLOAT_CTE       reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)
    RCURLY          reduce using rule 28 (bloque -> LCURLY estatutos estatu_rec RCURLY .)


state 121

    (43) asignacion -> ID pn_expresionID2 ASSIGN . pn_secu1 expresiones pn_secu2 SEMIC
    (115) pn_secu1 -> .

    LPAREN          reduce using rule 115 (pn_secu1 -> .)
    ID              reduce using rule 115 (pn_secu1 -> .)
    INT_CTE         reduce using rule 115 (pn_secu1 -> .)
    FLOAT_CTE       reduce using rule 115 (pn_secu1 -> .)

    pn_secu1                       shift and go to state 152

state 122

    (47) llamada_func -> ID pn_llamFunc1 LPAREN . pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
    (52) llamada_void -> ID pn_llamFunc1 LPAREN . llamada_void_aux RPAREN pn_llamFunc3 SEMIC
    (109) pn_expresion5 -> .
    (53) llamada_void_aux -> . expresiones pn_llamFunc2 llama_void_auxb
    (54) llamada_void_aux -> . empty
    (74) expresiones -> . t_exp or_check
    (101) empty -> .
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

  ! reduce/reduce conflict for RPAREN resolved using rule 101 (empty -> .)
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT_CTE resolved as shift
  ! shift/reduce conflict for FLOAT_CTE resolved as shift
    RPAREN          reduce using rule 101 (empty -> .)
    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

  ! LPAREN          [ reduce using rule 109 (pn_expresion5 -> .) ]
  ! ID              [ reduce using rule 109 (pn_expresion5 -> .) ]
  ! INT_CTE         [ reduce using rule 109 (pn_expresion5 -> .) ]
  ! FLOAT_CTE       [ reduce using rule 109 (pn_expresion5 -> .) ]
  ! RPAREN          [ reduce using rule 109 (pn_expresion5 -> .) ]

    pn_expresion5                  shift and go to state 153
    llamada_void_aux               shift and go to state 154
    expresiones                    shift and go to state 155
    empty                          shift and go to state 156
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 123

    (44) declaracion -> tipos ID pn_expresionID . declaracion_aux SEMIC
    (45) declaracion_aux -> . ASSIGN pn_secu1 expresiones pn_secu2
    (46) declaracion_aux -> . empty
    (101) empty -> .

    ASSIGN          shift and go to state 158
    SEMIC           reduce using rule 101 (empty -> .)

    declaracion_aux                shift and go to state 157
    empty                          shift and go to state 159

state 124

    (95) factor -> LPAREN pn_expresion5 expresiones . RPAREN pn_expresion6

    RPAREN          shift and go to state 160


state 125

    (97) factor -> ID .
    (47) llamada_func -> ID . pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
    (132) pn_llamFunc1 -> .

  ! reduce/reduce conflict for LPAREN resolved using rule 97 (factor -> ID .)
    MULT_OP         reduce using rule 97 (factor -> ID .)
    DIV_OP          reduce using rule 97 (factor -> ID .)
    PLUS_OP         reduce using rule 97 (factor -> ID .)
    MINUS_OP        reduce using rule 97 (factor -> ID .)
    GT_LOG          reduce using rule 97 (factor -> ID .)
    LT_LOG          reduce using rule 97 (factor -> ID .)
    EQUAL_LOG       reduce using rule 97 (factor -> ID .)
    NE_LOG          reduce using rule 97 (factor -> ID .)
    AND_LOG         reduce using rule 97 (factor -> ID .)
    OR_LOG          reduce using rule 97 (factor -> ID .)
    RPAREN          reduce using rule 97 (factor -> ID .)
    ID              reduce using rule 97 (factor -> ID .)
    RETURN          reduce using rule 97 (factor -> ID .)
    READ            reduce using rule 97 (factor -> ID .)
    WRITE           reduce using rule 97 (factor -> ID .)
    IF              reduce using rule 97 (factor -> ID .)
    WHILE           reduce using rule 97 (factor -> ID .)
    FOR             reduce using rule 97 (factor -> ID .)
    INT_TYPE        reduce using rule 97 (factor -> ID .)
    FLOAT_TYPE      reduce using rule 97 (factor -> ID .)
    CHAR_TYPE       reduce using rule 97 (factor -> ID .)
    LPAREN          reduce using rule 97 (factor -> ID .)
    INT_CTE         reduce using rule 97 (factor -> ID .)
    FLOAT_CTE       reduce using rule 97 (factor -> ID .)
    RCURLY          reduce using rule 97 (factor -> ID .)
    COMMA           reduce using rule 97 (factor -> ID .)
    RBRACK          reduce using rule 97 (factor -> ID .)
    SEMIC           reduce using rule 97 (factor -> ID .)
    TO              reduce using rule 97 (factor -> ID .)
    DO              reduce using rule 97 (factor -> ID .)

  ! LPAREN          [ reduce using rule 132 (pn_llamFunc1 -> .) ]

    pn_llamFunc1                   shift and go to state 161

state 126

    (98) factor -> llamada_func .

    MULT_OP         reduce using rule 98 (factor -> llamada_func .)
    DIV_OP          reduce using rule 98 (factor -> llamada_func .)
    PLUS_OP         reduce using rule 98 (factor -> llamada_func .)
    MINUS_OP        reduce using rule 98 (factor -> llamada_func .)
    GT_LOG          reduce using rule 98 (factor -> llamada_func .)
    LT_LOG          reduce using rule 98 (factor -> llamada_func .)
    EQUAL_LOG       reduce using rule 98 (factor -> llamada_func .)
    NE_LOG          reduce using rule 98 (factor -> llamada_func .)
    AND_LOG         reduce using rule 98 (factor -> llamada_func .)
    OR_LOG          reduce using rule 98 (factor -> llamada_func .)
    RPAREN          reduce using rule 98 (factor -> llamada_func .)
    ID              reduce using rule 98 (factor -> llamada_func .)
    RETURN          reduce using rule 98 (factor -> llamada_func .)
    READ            reduce using rule 98 (factor -> llamada_func .)
    WRITE           reduce using rule 98 (factor -> llamada_func .)
    IF              reduce using rule 98 (factor -> llamada_func .)
    WHILE           reduce using rule 98 (factor -> llamada_func .)
    FOR             reduce using rule 98 (factor -> llamada_func .)
    INT_TYPE        reduce using rule 98 (factor -> llamada_func .)
    FLOAT_TYPE      reduce using rule 98 (factor -> llamada_func .)
    CHAR_TYPE       reduce using rule 98 (factor -> llamada_func .)
    LPAREN          reduce using rule 98 (factor -> llamada_func .)
    INT_CTE         reduce using rule 98 (factor -> llamada_func .)
    FLOAT_CTE       reduce using rule 98 (factor -> llamada_func .)
    RCURLY          reduce using rule 98 (factor -> llamada_func .)
    COMMA           reduce using rule 98 (factor -> llamada_func .)
    RBRACK          reduce using rule 98 (factor -> llamada_func .)
    SEMIC           reduce using rule 98 (factor -> llamada_func .)
    TO              reduce using rule 98 (factor -> llamada_func .)
    DO              reduce using rule 98 (factor -> llamada_func .)


state 127

    (57) retorno -> RETURN pn_secu3 LPAREN . expresiones RPAREN SEMIC
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 162
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 128

    (58) lectura -> READ pn_secu3 LPAREN . ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5

    ID              shift and go to state 163


state 129

    (61) escritura -> WRITE pn_secu3 LPAREN . esc_aux RPAREN SEMIC pn_secu5
    (62) esc_aux -> . STRING_CTE pn_secu4 esc_rec
    (63) esc_aux -> . expresiones pn_secu4 esc_rec
    (64) esc_aux -> . empty
    (74) expresiones -> . t_exp or_check
    (101) empty -> .
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    STRING_CTE      shift and go to state 165
    RPAREN          reduce using rule 101 (empty -> .)
    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    esc_aux                        shift and go to state 164
    expresiones                    shift and go to state 166
    empty                          shift and go to state 167
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 130

    (67) decision -> IF LPAREN expresiones . RPAREN pn_cond1 THEN bloque else pn_cond2

    RPAREN          shift and go to state 168


state 131

    (70) loop_cond -> WHILE pn_loop1 LPAREN . expresiones RPAREN pn_loop2 DO bloque pn_loop3
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 169
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 132

    (71) loop_no_cond -> FOR ID nocond_aux . ASSIGN expresiones TO expresiones DO bloque

    ASSIGN          shift and go to state 170


state 133

    (72) nocond_aux -> LBRACK . expresiones RBRACK
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 171
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 134

    (73) nocond_aux -> empty .

    ASSIGN          reduce using rule 73 (nocond_aux -> empty .)


state 135

    (75) or_check -> OR_LOG pn_expresion9 . expresiones pn_expresion10
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 172
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 136

    (78) and_check -> AND_LOG pn_expresion9 . t_exp pn_expresion10
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    t_exp                          shift and go to state 173
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 137

    (82) op_check -> comparacion m_exp . pn_expresion8
    (112) pn_expresion8 -> .

    AND_LOG         reduce using rule 112 (pn_expresion8 -> .)
    OR_LOG          reduce using rule 112 (pn_expresion8 -> .)
    ID              reduce using rule 112 (pn_expresion8 -> .)
    RETURN          reduce using rule 112 (pn_expresion8 -> .)
    READ            reduce using rule 112 (pn_expresion8 -> .)
    WRITE           reduce using rule 112 (pn_expresion8 -> .)
    IF              reduce using rule 112 (pn_expresion8 -> .)
    WHILE           reduce using rule 112 (pn_expresion8 -> .)
    FOR             reduce using rule 112 (pn_expresion8 -> .)
    INT_TYPE        reduce using rule 112 (pn_expresion8 -> .)
    FLOAT_TYPE      reduce using rule 112 (pn_expresion8 -> .)
    CHAR_TYPE       reduce using rule 112 (pn_expresion8 -> .)
    LPAREN          reduce using rule 112 (pn_expresion8 -> .)
    INT_CTE         reduce using rule 112 (pn_expresion8 -> .)
    FLOAT_CTE       reduce using rule 112 (pn_expresion8 -> .)
    RCURLY          reduce using rule 112 (pn_expresion8 -> .)
    RPAREN          reduce using rule 112 (pn_expresion8 -> .)
    COMMA           reduce using rule 112 (pn_expresion8 -> .)
    RBRACK          reduce using rule 112 (pn_expresion8 -> .)
    SEMIC           reduce using rule 112 (pn_expresion8 -> .)
    TO              reduce using rule 112 (pn_expresion8 -> .)
    DO              reduce using rule 112 (pn_expresion8 -> .)

    pn_expresion8                  shift and go to state 174

state 138

    (83) comparacion -> GT_LOG pn_expresion7 .

    LPAREN          reduce using rule 83 (comparacion -> GT_LOG pn_expresion7 .)
    ID              reduce using rule 83 (comparacion -> GT_LOG pn_expresion7 .)
    INT_CTE         reduce using rule 83 (comparacion -> GT_LOG pn_expresion7 .)
    FLOAT_CTE       reduce using rule 83 (comparacion -> GT_LOG pn_expresion7 .)


state 139

    (84) comparacion -> LT_LOG pn_expresion7 .

    LPAREN          reduce using rule 84 (comparacion -> LT_LOG pn_expresion7 .)
    ID              reduce using rule 84 (comparacion -> LT_LOG pn_expresion7 .)
    INT_CTE         reduce using rule 84 (comparacion -> LT_LOG pn_expresion7 .)
    FLOAT_CTE       reduce using rule 84 (comparacion -> LT_LOG pn_expresion7 .)


state 140

    (85) comparacion -> EQUAL_LOG pn_expresion7 .

    LPAREN          reduce using rule 85 (comparacion -> EQUAL_LOG pn_expresion7 .)
    ID              reduce using rule 85 (comparacion -> EQUAL_LOG pn_expresion7 .)
    INT_CTE         reduce using rule 85 (comparacion -> EQUAL_LOG pn_expresion7 .)
    FLOAT_CTE       reduce using rule 85 (comparacion -> EQUAL_LOG pn_expresion7 .)


state 141

    (86) comparacion -> NE_LOG pn_expresion7 .

    LPAREN          reduce using rule 86 (comparacion -> NE_LOG pn_expresion7 .)
    ID              reduce using rule 86 (comparacion -> NE_LOG pn_expresion7 .)
    INT_CTE         reduce using rule 86 (comparacion -> NE_LOG pn_expresion7 .)
    FLOAT_CTE       reduce using rule 86 (comparacion -> NE_LOG pn_expresion7 .)


state 142

    (87) m_exp -> termino pn_expresion3 m_rec .

    GT_LOG          reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    LT_LOG          reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    EQUAL_LOG       reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    NE_LOG          reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    AND_LOG         reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    OR_LOG          reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    ID              reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    RETURN          reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    READ            reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    WRITE           reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    IF              reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    WHILE           reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    FOR             reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    INT_TYPE        reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    FLOAT_TYPE      reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    CHAR_TYPE       reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    LPAREN          reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    INT_CTE         reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    FLOAT_CTE       reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    RCURLY          reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    RPAREN          reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    COMMA           reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    RBRACK          reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    SEMIC           reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    TO              reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)
    DO              reduce using rule 87 (m_exp -> termino pn_expresion3 m_rec .)


state 143

    (88) m_rec -> PLUS_OP . pn_expresion1 m_exp
    (105) pn_expresion1 -> .

    LPAREN          reduce using rule 105 (pn_expresion1 -> .)
    ID              reduce using rule 105 (pn_expresion1 -> .)
    INT_CTE         reduce using rule 105 (pn_expresion1 -> .)
    FLOAT_CTE       reduce using rule 105 (pn_expresion1 -> .)

    pn_expresion1                  shift and go to state 175

state 144

    (89) m_rec -> MINUS_OP . pn_expresion1 m_exp
    (105) pn_expresion1 -> .

    LPAREN          reduce using rule 105 (pn_expresion1 -> .)
    ID              reduce using rule 105 (pn_expresion1 -> .)
    INT_CTE         reduce using rule 105 (pn_expresion1 -> .)
    FLOAT_CTE       reduce using rule 105 (pn_expresion1 -> .)

    pn_expresion1                  shift and go to state 176

state 145

    (90) m_rec -> empty .

    GT_LOG          reduce using rule 90 (m_rec -> empty .)
    LT_LOG          reduce using rule 90 (m_rec -> empty .)
    EQUAL_LOG       reduce using rule 90 (m_rec -> empty .)
    NE_LOG          reduce using rule 90 (m_rec -> empty .)
    AND_LOG         reduce using rule 90 (m_rec -> empty .)
    OR_LOG          reduce using rule 90 (m_rec -> empty .)
    ID              reduce using rule 90 (m_rec -> empty .)
    RETURN          reduce using rule 90 (m_rec -> empty .)
    READ            reduce using rule 90 (m_rec -> empty .)
    WRITE           reduce using rule 90 (m_rec -> empty .)
    IF              reduce using rule 90 (m_rec -> empty .)
    WHILE           reduce using rule 90 (m_rec -> empty .)
    FOR             reduce using rule 90 (m_rec -> empty .)
    INT_TYPE        reduce using rule 90 (m_rec -> empty .)
    FLOAT_TYPE      reduce using rule 90 (m_rec -> empty .)
    CHAR_TYPE       reduce using rule 90 (m_rec -> empty .)
    LPAREN          reduce using rule 90 (m_rec -> empty .)
    INT_CTE         reduce using rule 90 (m_rec -> empty .)
    FLOAT_CTE       reduce using rule 90 (m_rec -> empty .)
    RCURLY          reduce using rule 90 (m_rec -> empty .)
    RPAREN          reduce using rule 90 (m_rec -> empty .)
    COMMA           reduce using rule 90 (m_rec -> empty .)
    RBRACK          reduce using rule 90 (m_rec -> empty .)
    SEMIC           reduce using rule 90 (m_rec -> empty .)
    TO              reduce using rule 90 (m_rec -> empty .)
    DO              reduce using rule 90 (m_rec -> empty .)


state 146

    (91) termino -> factor pn_expresion4 term_rec .

    PLUS_OP         reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    MINUS_OP        reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    GT_LOG          reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    LT_LOG          reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    EQUAL_LOG       reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    NE_LOG          reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    AND_LOG         reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    OR_LOG          reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    ID              reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    RETURN          reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    READ            reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    WRITE           reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    IF              reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    WHILE           reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    FOR             reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    INT_TYPE        reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    FLOAT_TYPE      reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    CHAR_TYPE       reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    LPAREN          reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    INT_CTE         reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    FLOAT_CTE       reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    RCURLY          reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    RPAREN          reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    COMMA           reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    RBRACK          reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    SEMIC           reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    TO              reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)
    DO              reduce using rule 91 (termino -> factor pn_expresion4 term_rec .)


state 147

    (92) term_rec -> MULT_OP . pn_expresion2 termino
    (106) pn_expresion2 -> .

    LPAREN          reduce using rule 106 (pn_expresion2 -> .)
    ID              reduce using rule 106 (pn_expresion2 -> .)
    INT_CTE         reduce using rule 106 (pn_expresion2 -> .)
    FLOAT_CTE       reduce using rule 106 (pn_expresion2 -> .)

    pn_expresion2                  shift and go to state 177

state 148

    (93) term_rec -> DIV_OP . pn_expresion2 termino
    (106) pn_expresion2 -> .

    LPAREN          reduce using rule 106 (pn_expresion2 -> .)
    ID              reduce using rule 106 (pn_expresion2 -> .)
    INT_CTE         reduce using rule 106 (pn_expresion2 -> .)
    FLOAT_CTE       reduce using rule 106 (pn_expresion2 -> .)

    pn_expresion2                  shift and go to state 178

state 149

    (94) term_rec -> empty .

    PLUS_OP         reduce using rule 94 (term_rec -> empty .)
    MINUS_OP        reduce using rule 94 (term_rec -> empty .)
    GT_LOG          reduce using rule 94 (term_rec -> empty .)
    LT_LOG          reduce using rule 94 (term_rec -> empty .)
    EQUAL_LOG       reduce using rule 94 (term_rec -> empty .)
    NE_LOG          reduce using rule 94 (term_rec -> empty .)
    AND_LOG         reduce using rule 94 (term_rec -> empty .)
    OR_LOG          reduce using rule 94 (term_rec -> empty .)
    ID              reduce using rule 94 (term_rec -> empty .)
    RETURN          reduce using rule 94 (term_rec -> empty .)
    READ            reduce using rule 94 (term_rec -> empty .)
    WRITE           reduce using rule 94 (term_rec -> empty .)
    IF              reduce using rule 94 (term_rec -> empty .)
    WHILE           reduce using rule 94 (term_rec -> empty .)
    FOR             reduce using rule 94 (term_rec -> empty .)
    INT_TYPE        reduce using rule 94 (term_rec -> empty .)
    FLOAT_TYPE      reduce using rule 94 (term_rec -> empty .)
    CHAR_TYPE       reduce using rule 94 (term_rec -> empty .)
    LPAREN          reduce using rule 94 (term_rec -> empty .)
    INT_CTE         reduce using rule 94 (term_rec -> empty .)
    FLOAT_CTE       reduce using rule 94 (term_rec -> empty .)
    RCURLY          reduce using rule 94 (term_rec -> empty .)
    RPAREN          reduce using rule 94 (term_rec -> empty .)
    COMMA           reduce using rule 94 (term_rec -> empty .)
    RBRACK          reduce using rule 94 (term_rec -> empty .)
    SEMIC           reduce using rule 94 (term_rec -> empty .)
    TO              reduce using rule 94 (term_rec -> empty .)
    DO              reduce using rule 94 (term_rec -> empty .)


state 150

    (14) def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC . dec_var_loc bloque pn_func4
    (18) dec_var_loc -> . VARS tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec
    (19) dec_var_loc -> . empty
    (101) empty -> .

    VARS            shift and go to state 180
    LCURLY          reduce using rule 101 (empty -> .)

    dec_var_loc                    shift and go to state 179
    empty                          shift and go to state 181

state 151

    (24) parametros -> tipos COLON ID pn_func2 . param_aux
    (25) param_aux -> . COMMA parametros
    (26) param_aux -> . empty
    (101) empty -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 101 (empty -> .)

    param_aux                      shift and go to state 182
    empty                          shift and go to state 184

state 152

    (43) asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 . expresiones pn_secu2 SEMIC
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 185
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 153

    (47) llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 . llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
    (48) llamada_func_aux -> . expresiones pn_llamFunc2 llama_func_auxb
    (49) llamada_func_aux -> . empty
    (74) expresiones -> . t_exp or_check
    (101) empty -> .
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    RPAREN          reduce using rule 101 (empty -> .)
    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    llamada_func_aux               shift and go to state 186
    expresiones                    shift and go to state 187
    empty                          shift and go to state 188
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 154

    (52) llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux . RPAREN pn_llamFunc3 SEMIC

    RPAREN          shift and go to state 189


state 155

    (53) llamada_void_aux -> expresiones . pn_llamFunc2 llama_void_auxb
    (133) pn_llamFunc2 -> .

    COMMA           reduce using rule 133 (pn_llamFunc2 -> .)
    RPAREN          reduce using rule 133 (pn_llamFunc2 -> .)

    pn_llamFunc2                   shift and go to state 190

state 156

    (54) llamada_void_aux -> empty .

    RPAREN          reduce using rule 54 (llamada_void_aux -> empty .)


state 157

    (44) declaracion -> tipos ID pn_expresionID declaracion_aux . SEMIC

    SEMIC           shift and go to state 191


state 158

    (45) declaracion_aux -> ASSIGN . pn_secu1 expresiones pn_secu2
    (115) pn_secu1 -> .

    LPAREN          reduce using rule 115 (pn_secu1 -> .)
    ID              reduce using rule 115 (pn_secu1 -> .)
    INT_CTE         reduce using rule 115 (pn_secu1 -> .)
    FLOAT_CTE       reduce using rule 115 (pn_secu1 -> .)

    pn_secu1                       shift and go to state 192

state 159

    (46) declaracion_aux -> empty .

    SEMIC           reduce using rule 46 (declaracion_aux -> empty .)


state 160

    (95) factor -> LPAREN pn_expresion5 expresiones RPAREN . pn_expresion6
    (110) pn_expresion6 -> .

    MULT_OP         reduce using rule 110 (pn_expresion6 -> .)
    DIV_OP          reduce using rule 110 (pn_expresion6 -> .)
    PLUS_OP         reduce using rule 110 (pn_expresion6 -> .)
    MINUS_OP        reduce using rule 110 (pn_expresion6 -> .)
    GT_LOG          reduce using rule 110 (pn_expresion6 -> .)
    LT_LOG          reduce using rule 110 (pn_expresion6 -> .)
    EQUAL_LOG       reduce using rule 110 (pn_expresion6 -> .)
    NE_LOG          reduce using rule 110 (pn_expresion6 -> .)
    AND_LOG         reduce using rule 110 (pn_expresion6 -> .)
    OR_LOG          reduce using rule 110 (pn_expresion6 -> .)
    ID              reduce using rule 110 (pn_expresion6 -> .)
    RETURN          reduce using rule 110 (pn_expresion6 -> .)
    READ            reduce using rule 110 (pn_expresion6 -> .)
    WRITE           reduce using rule 110 (pn_expresion6 -> .)
    IF              reduce using rule 110 (pn_expresion6 -> .)
    WHILE           reduce using rule 110 (pn_expresion6 -> .)
    FOR             reduce using rule 110 (pn_expresion6 -> .)
    INT_TYPE        reduce using rule 110 (pn_expresion6 -> .)
    FLOAT_TYPE      reduce using rule 110 (pn_expresion6 -> .)
    CHAR_TYPE       reduce using rule 110 (pn_expresion6 -> .)
    LPAREN          reduce using rule 110 (pn_expresion6 -> .)
    INT_CTE         reduce using rule 110 (pn_expresion6 -> .)
    FLOAT_CTE       reduce using rule 110 (pn_expresion6 -> .)
    RCURLY          reduce using rule 110 (pn_expresion6 -> .)
    RPAREN          reduce using rule 110 (pn_expresion6 -> .)
    COMMA           reduce using rule 110 (pn_expresion6 -> .)
    RBRACK          reduce using rule 110 (pn_expresion6 -> .)
    SEMIC           reduce using rule 110 (pn_expresion6 -> .)
    TO              reduce using rule 110 (pn_expresion6 -> .)
    DO              reduce using rule 110 (pn_expresion6 -> .)

    pn_expresion6                  shift and go to state 193

state 161

    (47) llamada_func -> ID pn_llamFunc1 . LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 194


state 162

    (57) retorno -> RETURN pn_secu3 LPAREN expresiones . RPAREN SEMIC

    RPAREN          shift and go to state 195


state 163

    (58) lectura -> READ pn_secu3 LPAREN ID . lec_aux RPAREN SEMIC pn_secu4 pn_secu5
    (59) lec_aux -> . COMMA ID lec_aux
    (60) lec_aux -> . empty
    (101) empty -> .

    COMMA           shift and go to state 197
    RPAREN          reduce using rule 101 (empty -> .)

    lec_aux                        shift and go to state 196
    empty                          shift and go to state 198

state 164

    (61) escritura -> WRITE pn_secu3 LPAREN esc_aux . RPAREN SEMIC pn_secu5

    RPAREN          shift and go to state 199


state 165

    (62) esc_aux -> STRING_CTE . pn_secu4 esc_rec
    (118) pn_secu4 -> .

    COMMA           reduce using rule 118 (pn_secu4 -> .)
    RPAREN          reduce using rule 118 (pn_secu4 -> .)

    pn_secu4                       shift and go to state 200

state 166

    (63) esc_aux -> expresiones . pn_secu4 esc_rec
    (118) pn_secu4 -> .

    COMMA           reduce using rule 118 (pn_secu4 -> .)
    RPAREN          reduce using rule 118 (pn_secu4 -> .)

    pn_secu4                       shift and go to state 201

state 167

    (64) esc_aux -> empty .

    RPAREN          reduce using rule 64 (esc_aux -> empty .)


state 168

    (67) decision -> IF LPAREN expresiones RPAREN . pn_cond1 THEN bloque else pn_cond2
    (120) pn_cond1 -> .

    THEN            reduce using rule 120 (pn_cond1 -> .)

    pn_cond1                       shift and go to state 202

state 169

    (70) loop_cond -> WHILE pn_loop1 LPAREN expresiones . RPAREN pn_loop2 DO bloque pn_loop3

    RPAREN          shift and go to state 203


state 170

    (71) loop_no_cond -> FOR ID nocond_aux ASSIGN . expresiones TO expresiones DO bloque
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 204
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 171

    (72) nocond_aux -> LBRACK expresiones . RBRACK

    RBRACK          shift and go to state 205


state 172

    (75) or_check -> OR_LOG pn_expresion9 expresiones . pn_expresion10
    (114) pn_expresion10 -> .

    ID              reduce using rule 114 (pn_expresion10 -> .)
    RETURN          reduce using rule 114 (pn_expresion10 -> .)
    READ            reduce using rule 114 (pn_expresion10 -> .)
    WRITE           reduce using rule 114 (pn_expresion10 -> .)
    IF              reduce using rule 114 (pn_expresion10 -> .)
    WHILE           reduce using rule 114 (pn_expresion10 -> .)
    FOR             reduce using rule 114 (pn_expresion10 -> .)
    INT_TYPE        reduce using rule 114 (pn_expresion10 -> .)
    FLOAT_TYPE      reduce using rule 114 (pn_expresion10 -> .)
    CHAR_TYPE       reduce using rule 114 (pn_expresion10 -> .)
    LPAREN          reduce using rule 114 (pn_expresion10 -> .)
    INT_CTE         reduce using rule 114 (pn_expresion10 -> .)
    FLOAT_CTE       reduce using rule 114 (pn_expresion10 -> .)
    RCURLY          reduce using rule 114 (pn_expresion10 -> .)
    RPAREN          reduce using rule 114 (pn_expresion10 -> .)
    COMMA           reduce using rule 114 (pn_expresion10 -> .)
    RBRACK          reduce using rule 114 (pn_expresion10 -> .)
    SEMIC           reduce using rule 114 (pn_expresion10 -> .)
    TO              reduce using rule 114 (pn_expresion10 -> .)
    DO              reduce using rule 114 (pn_expresion10 -> .)

    pn_expresion10                 shift and go to state 206

state 173

    (78) and_check -> AND_LOG pn_expresion9 t_exp . pn_expresion10
    (114) pn_expresion10 -> .

    OR_LOG          reduce using rule 114 (pn_expresion10 -> .)
    ID              reduce using rule 114 (pn_expresion10 -> .)
    RETURN          reduce using rule 114 (pn_expresion10 -> .)
    READ            reduce using rule 114 (pn_expresion10 -> .)
    WRITE           reduce using rule 114 (pn_expresion10 -> .)
    IF              reduce using rule 114 (pn_expresion10 -> .)
    WHILE           reduce using rule 114 (pn_expresion10 -> .)
    FOR             reduce using rule 114 (pn_expresion10 -> .)
    INT_TYPE        reduce using rule 114 (pn_expresion10 -> .)
    FLOAT_TYPE      reduce using rule 114 (pn_expresion10 -> .)
    CHAR_TYPE       reduce using rule 114 (pn_expresion10 -> .)
    LPAREN          reduce using rule 114 (pn_expresion10 -> .)
    INT_CTE         reduce using rule 114 (pn_expresion10 -> .)
    FLOAT_CTE       reduce using rule 114 (pn_expresion10 -> .)
    RCURLY          reduce using rule 114 (pn_expresion10 -> .)
    RPAREN          reduce using rule 114 (pn_expresion10 -> .)
    COMMA           reduce using rule 114 (pn_expresion10 -> .)
    RBRACK          reduce using rule 114 (pn_expresion10 -> .)
    SEMIC           reduce using rule 114 (pn_expresion10 -> .)
    TO              reduce using rule 114 (pn_expresion10 -> .)
    DO              reduce using rule 114 (pn_expresion10 -> .)

    pn_expresion10                 shift and go to state 207

state 174

    (82) op_check -> comparacion m_exp pn_expresion8 .

    AND_LOG         reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    OR_LOG          reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    ID              reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    RETURN          reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    READ            reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    WRITE           reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    IF              reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    WHILE           reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    FOR             reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    INT_TYPE        reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    FLOAT_TYPE      reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    CHAR_TYPE       reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    LPAREN          reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    INT_CTE         reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    FLOAT_CTE       reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    RCURLY          reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    RPAREN          reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    COMMA           reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    RBRACK          reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    SEMIC           reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    TO              reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)
    DO              reduce using rule 82 (op_check -> comparacion m_exp pn_expresion8 .)


state 175

    (88) m_rec -> PLUS_OP pn_expresion1 . m_exp
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    m_exp                          shift and go to state 208
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 176

    (89) m_rec -> MINUS_OP pn_expresion1 . m_exp
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    m_exp                          shift and go to state 209
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 177

    (92) term_rec -> MULT_OP pn_expresion2 . termino
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    termino                        shift and go to state 210
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 178

    (93) term_rec -> DIV_OP pn_expresion2 . termino
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    termino                        shift and go to state 211
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 179

    (14) def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc . bloque pn_func4
    (28) bloque -> . LCURLY estatutos estatu_rec RCURLY

    LCURLY          shift and go to state 47

    bloque                         shift and go to state 212

state 180

    (18) dec_var_loc -> VARS . tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct

    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14

    tipos                          shift and go to state 213

state 181

    (19) dec_var_loc -> empty .

    LCURLY          reduce using rule 19 (dec_var_loc -> empty .)


state 182

    (24) parametros -> tipos COLON ID pn_func2 param_aux .

    RPAREN          reduce using rule 24 (parametros -> tipos COLON ID pn_func2 param_aux .)


state 183

    (25) param_aux -> COMMA . parametros
    (24) parametros -> . tipos COLON ID pn_func2 param_aux
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct

    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14

    parametros                     shift and go to state 214
    tipos                          shift and go to state 49

state 184

    (26) param_aux -> empty .

    RPAREN          reduce using rule 26 (param_aux -> empty .)


state 185

    (43) asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones . pn_secu2 SEMIC
    (116) pn_secu2 -> .

    SEMIC           reduce using rule 116 (pn_secu2 -> .)

    pn_secu2                       shift and go to state 215

state 186

    (47) llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux . RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    RPAREN          shift and go to state 216


state 187

    (48) llamada_func_aux -> expresiones . pn_llamFunc2 llama_func_auxb
    (133) pn_llamFunc2 -> .

    COMMA           reduce using rule 133 (pn_llamFunc2 -> .)
    RPAREN          reduce using rule 133 (pn_llamFunc2 -> .)

    pn_llamFunc2                   shift and go to state 217

state 188

    (49) llamada_func_aux -> empty .

    RPAREN          reduce using rule 49 (llamada_func_aux -> empty .)


state 189

    (52) llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN . pn_llamFunc3 SEMIC
    (134) pn_llamFunc3 -> .

    SEMIC           reduce using rule 134 (pn_llamFunc3 -> .)

    pn_llamFunc3                   shift and go to state 218

state 190

    (53) llamada_void_aux -> expresiones pn_llamFunc2 . llama_void_auxb
    (55) llama_void_auxb -> . COMMA llamada_func_aux
    (56) llama_void_auxb -> . empty
    (101) empty -> .

    COMMA           shift and go to state 220
    RPAREN          reduce using rule 101 (empty -> .)

    llama_void_auxb                shift and go to state 219
    empty                          shift and go to state 221

state 191

    (44) declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .

    ID              reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    RETURN          reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    READ            reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    WRITE           reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    IF              reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    WHILE           reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    FOR             reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    INT_TYPE        reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    FLOAT_TYPE      reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    CHAR_TYPE       reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    LPAREN          reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    INT_CTE         reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    FLOAT_CTE       reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)
    RCURLY          reduce using rule 44 (declaracion -> tipos ID pn_expresionID declaracion_aux SEMIC .)


state 192

    (45) declaracion_aux -> ASSIGN pn_secu1 . expresiones pn_secu2
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 222
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 193

    (95) factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .

    MULT_OP         reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    DIV_OP          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    PLUS_OP         reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    MINUS_OP        reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    GT_LOG          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    LT_LOG          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    EQUAL_LOG       reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    NE_LOG          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    AND_LOG         reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    OR_LOG          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    ID              reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    RETURN          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    READ            reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    WRITE           reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    IF              reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    WHILE           reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    FOR             reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    INT_TYPE        reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    FLOAT_TYPE      reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    CHAR_TYPE       reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    LPAREN          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    INT_CTE         reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    FLOAT_CTE       reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    RCURLY          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    RPAREN          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    COMMA           reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    RBRACK          reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    SEMIC           reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    TO              reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)
    DO              reduce using rule 95 (factor -> LPAREN pn_expresion5 expresiones RPAREN pn_expresion6 .)


state 194

    (47) llamada_func -> ID pn_llamFunc1 LPAREN . pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC
    (109) pn_expresion5 -> .

    LPAREN          reduce using rule 109 (pn_expresion5 -> .)
    ID              reduce using rule 109 (pn_expresion5 -> .)
    INT_CTE         reduce using rule 109 (pn_expresion5 -> .)
    FLOAT_CTE       reduce using rule 109 (pn_expresion5 -> .)
    RPAREN          reduce using rule 109 (pn_expresion5 -> .)

    pn_expresion5                  shift and go to state 153

state 195

    (57) retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN . SEMIC

    SEMIC           shift and go to state 223


state 196

    (58) lectura -> READ pn_secu3 LPAREN ID lec_aux . RPAREN SEMIC pn_secu4 pn_secu5

    RPAREN          shift and go to state 224


state 197

    (59) lec_aux -> COMMA . ID lec_aux

    ID              shift and go to state 225


state 198

    (60) lec_aux -> empty .

    RPAREN          reduce using rule 60 (lec_aux -> empty .)


state 199

    (61) escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN . SEMIC pn_secu5

    SEMIC           shift and go to state 226


state 200

    (62) esc_aux -> STRING_CTE pn_secu4 . esc_rec
    (65) esc_rec -> . COMMA esc_aux
    (66) esc_rec -> . empty
    (101) empty -> .

    COMMA           shift and go to state 228
    RPAREN          reduce using rule 101 (empty -> .)

    esc_rec                        shift and go to state 227
    empty                          shift and go to state 229

state 201

    (63) esc_aux -> expresiones pn_secu4 . esc_rec
    (65) esc_rec -> . COMMA esc_aux
    (66) esc_rec -> . empty
    (101) empty -> .

    COMMA           shift and go to state 228
    RPAREN          reduce using rule 101 (empty -> .)

    esc_rec                        shift and go to state 230
    empty                          shift and go to state 229

state 202

    (67) decision -> IF LPAREN expresiones RPAREN pn_cond1 . THEN bloque else pn_cond2

    THEN            shift and go to state 231


state 203

    (70) loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN . pn_loop2 DO bloque pn_loop3
    (124) pn_loop2 -> .

    DO              reduce using rule 124 (pn_loop2 -> .)

    pn_loop2                       shift and go to state 232

state 204

    (71) loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones . TO expresiones DO bloque

    TO              shift and go to state 233


state 205

    (72) nocond_aux -> LBRACK expresiones RBRACK .

    ASSIGN          reduce using rule 72 (nocond_aux -> LBRACK expresiones RBRACK .)


state 206

    (75) or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .

    ID              reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    RETURN          reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    READ            reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    WRITE           reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    IF              reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    WHILE           reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    FOR             reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    INT_TYPE        reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    FLOAT_TYPE      reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    CHAR_TYPE       reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    LPAREN          reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    INT_CTE         reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    FLOAT_CTE       reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    RCURLY          reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    RPAREN          reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    COMMA           reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    RBRACK          reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    SEMIC           reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    TO              reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)
    DO              reduce using rule 75 (or_check -> OR_LOG pn_expresion9 expresiones pn_expresion10 .)


state 207

    (78) and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .

    OR_LOG          reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    ID              reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    RETURN          reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    READ            reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    WRITE           reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    IF              reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    WHILE           reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    FOR             reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    INT_TYPE        reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    FLOAT_TYPE      reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    CHAR_TYPE       reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    LPAREN          reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    INT_CTE         reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    FLOAT_CTE       reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    RCURLY          reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    RPAREN          reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    COMMA           reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    RBRACK          reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    SEMIC           reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    TO              reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)
    DO              reduce using rule 78 (and_check -> AND_LOG pn_expresion9 t_exp pn_expresion10 .)


state 208

    (88) m_rec -> PLUS_OP pn_expresion1 m_exp .

    GT_LOG          reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    LT_LOG          reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    EQUAL_LOG       reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    NE_LOG          reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    AND_LOG         reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    OR_LOG          reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    ID              reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    RETURN          reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    READ            reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    WRITE           reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    IF              reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    WHILE           reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    FOR             reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    INT_TYPE        reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    FLOAT_TYPE      reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    CHAR_TYPE       reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    LPAREN          reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    INT_CTE         reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    FLOAT_CTE       reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    RCURLY          reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    RPAREN          reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    COMMA           reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    RBRACK          reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    SEMIC           reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    TO              reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)
    DO              reduce using rule 88 (m_rec -> PLUS_OP pn_expresion1 m_exp .)


state 209

    (89) m_rec -> MINUS_OP pn_expresion1 m_exp .

    GT_LOG          reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    LT_LOG          reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    EQUAL_LOG       reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    NE_LOG          reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    AND_LOG         reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    OR_LOG          reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    ID              reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    RETURN          reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    READ            reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    WRITE           reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    IF              reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    WHILE           reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    FOR             reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    INT_TYPE        reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    FLOAT_TYPE      reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    CHAR_TYPE       reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    LPAREN          reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    INT_CTE         reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    FLOAT_CTE       reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    RCURLY          reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    RPAREN          reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    COMMA           reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    RBRACK          reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    SEMIC           reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    TO              reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)
    DO              reduce using rule 89 (m_rec -> MINUS_OP pn_expresion1 m_exp .)


state 210

    (92) term_rec -> MULT_OP pn_expresion2 termino .

    PLUS_OP         reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    MINUS_OP        reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    GT_LOG          reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    LT_LOG          reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    EQUAL_LOG       reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    NE_LOG          reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    AND_LOG         reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    OR_LOG          reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    ID              reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    RETURN          reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    READ            reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    WRITE           reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    IF              reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    WHILE           reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    FOR             reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    INT_TYPE        reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    FLOAT_TYPE      reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    CHAR_TYPE       reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    LPAREN          reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    INT_CTE         reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    FLOAT_CTE       reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    RCURLY          reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    RPAREN          reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    COMMA           reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    RBRACK          reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    SEMIC           reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    TO              reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)
    DO              reduce using rule 92 (term_rec -> MULT_OP pn_expresion2 termino .)


state 211

    (93) term_rec -> DIV_OP pn_expresion2 termino .

    PLUS_OP         reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    MINUS_OP        reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    GT_LOG          reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    LT_LOG          reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    EQUAL_LOG       reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    NE_LOG          reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    AND_LOG         reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    OR_LOG          reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    ID              reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    RETURN          reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    READ            reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    WRITE           reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    IF              reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    WHILE           reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    FOR             reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    INT_TYPE        reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    FLOAT_TYPE      reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    CHAR_TYPE       reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    LPAREN          reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    INT_CTE         reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    FLOAT_CTE       reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    RCURLY          reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    RPAREN          reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    COMMA           reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    RBRACK          reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    SEMIC           reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    TO              reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)
    DO              reduce using rule 93 (term_rec -> DIV_OP pn_expresion2 termino .)


state 212

    (14) def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc bloque . pn_func4
    (131) pn_func4 -> .

    MAIN            reduce using rule 131 (pn_func4 -> .)

    pn_func4                       shift and go to state 234

state 213

    (18) dec_var_loc -> VARS tipos . COLON ID dec_var_loc_aux SEMIC var_loc_rec

    COLON           shift and go to state 235


state 214

    (25) param_aux -> COMMA parametros .

    RPAREN          reduce using rule 25 (param_aux -> COMMA parametros .)


state 215

    (43) asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 . SEMIC

    SEMIC           shift and go to state 236


state 216

    (47) llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN . pn_expresion6 pn_llamFunc3 SEMIC
    (110) pn_expresion6 -> .

    SEMIC           reduce using rule 110 (pn_expresion6 -> .)

    pn_expresion6                  shift and go to state 237

state 217

    (48) llamada_func_aux -> expresiones pn_llamFunc2 . llama_func_auxb
    (50) llama_func_auxb -> . COMMA llamada_func_aux
    (51) llama_func_auxb -> . empty
    (101) empty -> .

    COMMA           shift and go to state 239
    RPAREN          reduce using rule 101 (empty -> .)

    llama_func_auxb                shift and go to state 238
    empty                          shift and go to state 240

state 218

    (52) llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 . SEMIC

    SEMIC           shift and go to state 241


state 219

    (53) llamada_void_aux -> expresiones pn_llamFunc2 llama_void_auxb .

    RPAREN          reduce using rule 53 (llamada_void_aux -> expresiones pn_llamFunc2 llama_void_auxb .)


state 220

    (55) llama_void_auxb -> COMMA . llamada_func_aux
    (48) llamada_func_aux -> . expresiones pn_llamFunc2 llama_func_auxb
    (49) llamada_func_aux -> . empty
    (74) expresiones -> . t_exp or_check
    (101) empty -> .
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    RPAREN          reduce using rule 101 (empty -> .)
    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    llamada_func_aux               shift and go to state 242
    expresiones                    shift and go to state 187
    empty                          shift and go to state 188
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 221

    (56) llama_void_auxb -> empty .

    RPAREN          reduce using rule 56 (llama_void_auxb -> empty .)


state 222

    (45) declaracion_aux -> ASSIGN pn_secu1 expresiones . pn_secu2
    (116) pn_secu2 -> .

    SEMIC           reduce using rule 116 (pn_secu2 -> .)

    pn_secu2                       shift and go to state 243

state 223

    (57) retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .

    ID              reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    RETURN          reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    READ            reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    WRITE           reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    IF              reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    WHILE           reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    FOR             reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    INT_TYPE        reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    FLOAT_TYPE      reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    CHAR_TYPE       reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    LPAREN          reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    INT_CTE         reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    FLOAT_CTE       reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)
    RCURLY          reduce using rule 57 (retorno -> RETURN pn_secu3 LPAREN expresiones RPAREN SEMIC .)


state 224

    (58) lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN . SEMIC pn_secu4 pn_secu5

    SEMIC           shift and go to state 244


state 225

    (59) lec_aux -> COMMA ID . lec_aux
    (59) lec_aux -> . COMMA ID lec_aux
    (60) lec_aux -> . empty
    (101) empty -> .

    COMMA           shift and go to state 197
    RPAREN          reduce using rule 101 (empty -> .)

    lec_aux                        shift and go to state 245
    empty                          shift and go to state 198

state 226

    (61) escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC . pn_secu5
    (119) pn_secu5 -> .

    ID              reduce using rule 119 (pn_secu5 -> .)
    RETURN          reduce using rule 119 (pn_secu5 -> .)
    READ            reduce using rule 119 (pn_secu5 -> .)
    WRITE           reduce using rule 119 (pn_secu5 -> .)
    IF              reduce using rule 119 (pn_secu5 -> .)
    WHILE           reduce using rule 119 (pn_secu5 -> .)
    FOR             reduce using rule 119 (pn_secu5 -> .)
    INT_TYPE        reduce using rule 119 (pn_secu5 -> .)
    FLOAT_TYPE      reduce using rule 119 (pn_secu5 -> .)
    CHAR_TYPE       reduce using rule 119 (pn_secu5 -> .)
    LPAREN          reduce using rule 119 (pn_secu5 -> .)
    INT_CTE         reduce using rule 119 (pn_secu5 -> .)
    FLOAT_CTE       reduce using rule 119 (pn_secu5 -> .)
    RCURLY          reduce using rule 119 (pn_secu5 -> .)

    pn_secu5                       shift and go to state 246

state 227

    (62) esc_aux -> STRING_CTE pn_secu4 esc_rec .

    RPAREN          reduce using rule 62 (esc_aux -> STRING_CTE pn_secu4 esc_rec .)


state 228

    (65) esc_rec -> COMMA . esc_aux
    (62) esc_aux -> . STRING_CTE pn_secu4 esc_rec
    (63) esc_aux -> . expresiones pn_secu4 esc_rec
    (64) esc_aux -> . empty
    (74) expresiones -> . t_exp or_check
    (101) empty -> .
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    STRING_CTE      shift and go to state 165
    RPAREN          reduce using rule 101 (empty -> .)
    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    esc_aux                        shift and go to state 247
    expresiones                    shift and go to state 166
    empty                          shift and go to state 167
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 229

    (66) esc_rec -> empty .

    RPAREN          reduce using rule 66 (esc_rec -> empty .)


state 230

    (63) esc_aux -> expresiones pn_secu4 esc_rec .

    RPAREN          reduce using rule 63 (esc_aux -> expresiones pn_secu4 esc_rec .)


state 231

    (67) decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN . bloque else pn_cond2
    (28) bloque -> . LCURLY estatutos estatu_rec RCURLY

    LCURLY          shift and go to state 47

    bloque                         shift and go to state 248

state 232

    (70) loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 . DO bloque pn_loop3

    DO              shift and go to state 249


state 233

    (71) loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO . expresiones DO bloque
    (74) expresiones -> . t_exp or_check
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    expresiones                    shift and go to state 250
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 234

    (14) def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4 .

    MAIN            reduce using rule 14 (def_funciones -> FUNCTION tipos_func ID pn_func1 LPAREN parametros RPAREN pn_func3 SEMIC dec_var_loc bloque pn_func4 .)


state 235

    (18) dec_var_loc -> VARS tipos COLON . ID dec_var_loc_aux SEMIC var_loc_rec

    ID              shift and go to state 251


state 236

    (43) asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .

    ID              reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    RETURN          reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    READ            reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    WRITE           reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    IF              reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    WHILE           reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    FOR             reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    INT_TYPE        reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    FLOAT_TYPE      reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    CHAR_TYPE       reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    LPAREN          reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    INT_CTE         reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    FLOAT_CTE       reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)
    RCURLY          reduce using rule 43 (asignacion -> ID pn_expresionID2 ASSIGN pn_secu1 expresiones pn_secu2 SEMIC .)


state 237

    (47) llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 . pn_llamFunc3 SEMIC
    (134) pn_llamFunc3 -> .

    SEMIC           reduce using rule 134 (pn_llamFunc3 -> .)

    pn_llamFunc3                   shift and go to state 252

state 238

    (48) llamada_func_aux -> expresiones pn_llamFunc2 llama_func_auxb .

    RPAREN          reduce using rule 48 (llamada_func_aux -> expresiones pn_llamFunc2 llama_func_auxb .)


state 239

    (50) llama_func_auxb -> COMMA . llamada_func_aux
    (48) llamada_func_aux -> . expresiones pn_llamFunc2 llama_func_auxb
    (49) llamada_func_aux -> . empty
    (74) expresiones -> . t_exp or_check
    (101) empty -> .
    (77) t_exp -> . g_exp and_check
    (80) g_exp -> . m_exp op_check
    (87) m_exp -> . termino pn_expresion3 m_rec
    (91) termino -> . factor pn_expresion4 term_rec
    (95) factor -> . LPAREN pn_expresion5 expresiones RPAREN pn_expresion6
    (96) factor -> . cte
    (97) factor -> . ID
    (98) factor -> . llamada_func
    (99) cte -> . INT_CTE pn_constante
    (100) cte -> . FLOAT_CTE pn_constante
    (47) llamada_func -> . ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC

    RPAREN          reduce using rule 101 (empty -> .)
    LPAREN          shift and go to state 68
    ID              shift and go to state 125
    INT_CTE         shift and go to state 81
    FLOAT_CTE       shift and go to state 82

    llamada_func_aux               shift and go to state 253
    expresiones                    shift and go to state 187
    empty                          shift and go to state 188
    t_exp                          shift and go to state 75
    g_exp                          shift and go to state 76
    m_exp                          shift and go to state 77
    termino                        shift and go to state 78
    factor                         shift and go to state 79
    cte                            shift and go to state 80
    llamada_func                   shift and go to state 126

state 240

    (51) llama_func_auxb -> empty .

    RPAREN          reduce using rule 51 (llama_func_auxb -> empty .)


state 241

    (52) llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .

    ID              reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    RETURN          reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    READ            reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    WRITE           reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    IF              reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    WHILE           reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    FOR             reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    INT_TYPE        reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    FLOAT_TYPE      reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    CHAR_TYPE       reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    LPAREN          reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    INT_CTE         reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    FLOAT_CTE       reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)
    RCURLY          reduce using rule 52 (llamada_void -> ID pn_llamFunc1 LPAREN llamada_void_aux RPAREN pn_llamFunc3 SEMIC .)


state 242

    (55) llama_void_auxb -> COMMA llamada_func_aux .

    RPAREN          reduce using rule 55 (llama_void_auxb -> COMMA llamada_func_aux .)


state 243

    (45) declaracion_aux -> ASSIGN pn_secu1 expresiones pn_secu2 .

    SEMIC           reduce using rule 45 (declaracion_aux -> ASSIGN pn_secu1 expresiones pn_secu2 .)


state 244

    (58) lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC . pn_secu4 pn_secu5
    (118) pn_secu4 -> .

    ID              reduce using rule 118 (pn_secu4 -> .)
    RETURN          reduce using rule 118 (pn_secu4 -> .)
    READ            reduce using rule 118 (pn_secu4 -> .)
    WRITE           reduce using rule 118 (pn_secu4 -> .)
    IF              reduce using rule 118 (pn_secu4 -> .)
    WHILE           reduce using rule 118 (pn_secu4 -> .)
    FOR             reduce using rule 118 (pn_secu4 -> .)
    INT_TYPE        reduce using rule 118 (pn_secu4 -> .)
    FLOAT_TYPE      reduce using rule 118 (pn_secu4 -> .)
    CHAR_TYPE       reduce using rule 118 (pn_secu4 -> .)
    LPAREN          reduce using rule 118 (pn_secu4 -> .)
    INT_CTE         reduce using rule 118 (pn_secu4 -> .)
    FLOAT_CTE       reduce using rule 118 (pn_secu4 -> .)
    RCURLY          reduce using rule 118 (pn_secu4 -> .)

    pn_secu4                       shift and go to state 254

state 245

    (59) lec_aux -> COMMA ID lec_aux .

    RPAREN          reduce using rule 59 (lec_aux -> COMMA ID lec_aux .)


state 246

    (61) escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .

    ID              reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    RETURN          reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    READ            reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    WRITE           reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    IF              reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    WHILE           reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    FOR             reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    INT_TYPE        reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    FLOAT_TYPE      reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    CHAR_TYPE       reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    LPAREN          reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    INT_CTE         reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    FLOAT_CTE       reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)
    RCURLY          reduce using rule 61 (escritura -> WRITE pn_secu3 LPAREN esc_aux RPAREN SEMIC pn_secu5 .)


state 247

    (65) esc_rec -> COMMA esc_aux .

    RPAREN          reduce using rule 65 (esc_rec -> COMMA esc_aux .)


state 248

    (67) decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque . else pn_cond2
    (68) else -> . ELSE pn_cond3 bloque
    (69) else -> . empty
    (101) empty -> .

    ELSE            shift and go to state 256
    ID              reduce using rule 101 (empty -> .)
    RETURN          reduce using rule 101 (empty -> .)
    READ            reduce using rule 101 (empty -> .)
    WRITE           reduce using rule 101 (empty -> .)
    IF              reduce using rule 101 (empty -> .)
    WHILE           reduce using rule 101 (empty -> .)
    FOR             reduce using rule 101 (empty -> .)
    INT_TYPE        reduce using rule 101 (empty -> .)
    FLOAT_TYPE      reduce using rule 101 (empty -> .)
    CHAR_TYPE       reduce using rule 101 (empty -> .)
    LPAREN          reduce using rule 101 (empty -> .)
    INT_CTE         reduce using rule 101 (empty -> .)
    FLOAT_CTE       reduce using rule 101 (empty -> .)
    RCURLY          reduce using rule 101 (empty -> .)

    else                           shift and go to state 255
    empty                          shift and go to state 257

state 249

    (70) loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO . bloque pn_loop3
    (28) bloque -> . LCURLY estatutos estatu_rec RCURLY

    LCURLY          shift and go to state 47

    bloque                         shift and go to state 258

state 250

    (71) loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones . DO bloque

    DO              shift and go to state 259


state 251

    (18) dec_var_loc -> VARS tipos COLON ID . dec_var_loc_aux SEMIC var_loc_rec
    (20) dec_var_loc_aux -> . COMMA ID dec_var_loc_aux
    (21) dec_var_loc_aux -> . empty
    (101) empty -> .

    COMMA           shift and go to state 261
    SEMIC           reduce using rule 101 (empty -> .)

    dec_var_loc_aux                shift and go to state 260
    empty                          shift and go to state 262

state 252

    (47) llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 . SEMIC

    SEMIC           shift and go to state 263


state 253

    (50) llama_func_auxb -> COMMA llamada_func_aux .

    RPAREN          reduce using rule 50 (llama_func_auxb -> COMMA llamada_func_aux .)


state 254

    (58) lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 . pn_secu5
    (119) pn_secu5 -> .

    ID              reduce using rule 119 (pn_secu5 -> .)
    RETURN          reduce using rule 119 (pn_secu5 -> .)
    READ            reduce using rule 119 (pn_secu5 -> .)
    WRITE           reduce using rule 119 (pn_secu5 -> .)
    IF              reduce using rule 119 (pn_secu5 -> .)
    WHILE           reduce using rule 119 (pn_secu5 -> .)
    FOR             reduce using rule 119 (pn_secu5 -> .)
    INT_TYPE        reduce using rule 119 (pn_secu5 -> .)
    FLOAT_TYPE      reduce using rule 119 (pn_secu5 -> .)
    CHAR_TYPE       reduce using rule 119 (pn_secu5 -> .)
    LPAREN          reduce using rule 119 (pn_secu5 -> .)
    INT_CTE         reduce using rule 119 (pn_secu5 -> .)
    FLOAT_CTE       reduce using rule 119 (pn_secu5 -> .)
    RCURLY          reduce using rule 119 (pn_secu5 -> .)

    pn_secu5                       shift and go to state 264

state 255

    (67) decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else . pn_cond2
    (121) pn_cond2 -> .

    ID              reduce using rule 121 (pn_cond2 -> .)
    RETURN          reduce using rule 121 (pn_cond2 -> .)
    READ            reduce using rule 121 (pn_cond2 -> .)
    WRITE           reduce using rule 121 (pn_cond2 -> .)
    IF              reduce using rule 121 (pn_cond2 -> .)
    WHILE           reduce using rule 121 (pn_cond2 -> .)
    FOR             reduce using rule 121 (pn_cond2 -> .)
    INT_TYPE        reduce using rule 121 (pn_cond2 -> .)
    FLOAT_TYPE      reduce using rule 121 (pn_cond2 -> .)
    CHAR_TYPE       reduce using rule 121 (pn_cond2 -> .)
    LPAREN          reduce using rule 121 (pn_cond2 -> .)
    INT_CTE         reduce using rule 121 (pn_cond2 -> .)
    FLOAT_CTE       reduce using rule 121 (pn_cond2 -> .)
    RCURLY          reduce using rule 121 (pn_cond2 -> .)

    pn_cond2                       shift and go to state 265

state 256

    (68) else -> ELSE . pn_cond3 bloque
    (122) pn_cond3 -> .

    LCURLY          reduce using rule 122 (pn_cond3 -> .)

    pn_cond3                       shift and go to state 266

state 257

    (69) else -> empty .

    ID              reduce using rule 69 (else -> empty .)
    RETURN          reduce using rule 69 (else -> empty .)
    READ            reduce using rule 69 (else -> empty .)
    WRITE           reduce using rule 69 (else -> empty .)
    IF              reduce using rule 69 (else -> empty .)
    WHILE           reduce using rule 69 (else -> empty .)
    FOR             reduce using rule 69 (else -> empty .)
    INT_TYPE        reduce using rule 69 (else -> empty .)
    FLOAT_TYPE      reduce using rule 69 (else -> empty .)
    CHAR_TYPE       reduce using rule 69 (else -> empty .)
    LPAREN          reduce using rule 69 (else -> empty .)
    INT_CTE         reduce using rule 69 (else -> empty .)
    FLOAT_CTE       reduce using rule 69 (else -> empty .)
    RCURLY          reduce using rule 69 (else -> empty .)


state 258

    (70) loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque . pn_loop3
    (125) pn_loop3 -> .

    ID              reduce using rule 125 (pn_loop3 -> .)
    RETURN          reduce using rule 125 (pn_loop3 -> .)
    READ            reduce using rule 125 (pn_loop3 -> .)
    WRITE           reduce using rule 125 (pn_loop3 -> .)
    IF              reduce using rule 125 (pn_loop3 -> .)
    WHILE           reduce using rule 125 (pn_loop3 -> .)
    FOR             reduce using rule 125 (pn_loop3 -> .)
    INT_TYPE        reduce using rule 125 (pn_loop3 -> .)
    FLOAT_TYPE      reduce using rule 125 (pn_loop3 -> .)
    CHAR_TYPE       reduce using rule 125 (pn_loop3 -> .)
    LPAREN          reduce using rule 125 (pn_loop3 -> .)
    INT_CTE         reduce using rule 125 (pn_loop3 -> .)
    FLOAT_CTE       reduce using rule 125 (pn_loop3 -> .)
    RCURLY          reduce using rule 125 (pn_loop3 -> .)

    pn_loop3                       shift and go to state 267

state 259

    (71) loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO . bloque
    (28) bloque -> . LCURLY estatutos estatu_rec RCURLY

    LCURLY          shift and go to state 47

    bloque                         shift and go to state 268

state 260

    (18) dec_var_loc -> VARS tipos COLON ID dec_var_loc_aux . SEMIC var_loc_rec

    SEMIC           shift and go to state 269


state 261

    (20) dec_var_loc_aux -> COMMA . ID dec_var_loc_aux

    ID              shift and go to state 270


state 262

    (21) dec_var_loc_aux -> empty .

    SEMIC           reduce using rule 21 (dec_var_loc_aux -> empty .)


state 263

    (47) llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .

    ID              reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    RETURN          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    READ            reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    WRITE           reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    IF              reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    WHILE           reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    FOR             reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    INT_TYPE        reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    FLOAT_TYPE      reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    CHAR_TYPE       reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    LPAREN          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    INT_CTE         reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    FLOAT_CTE       reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    RCURLY          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    MULT_OP         reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    DIV_OP          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    PLUS_OP         reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    MINUS_OP        reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    GT_LOG          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    LT_LOG          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    EQUAL_LOG       reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    NE_LOG          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    AND_LOG         reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    OR_LOG          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    RPAREN          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    COMMA           reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    RBRACK          reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    SEMIC           reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    TO              reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)
    DO              reduce using rule 47 (llamada_func -> ID pn_llamFunc1 LPAREN pn_expresion5 llamada_func_aux RPAREN pn_expresion6 pn_llamFunc3 SEMIC .)


state 264

    (58) lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .

    ID              reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    RETURN          reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    READ            reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    WRITE           reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    IF              reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    WHILE           reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    FOR             reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    INT_TYPE        reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    FLOAT_TYPE      reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    CHAR_TYPE       reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    LPAREN          reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    INT_CTE         reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    FLOAT_CTE       reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)
    RCURLY          reduce using rule 58 (lectura -> READ pn_secu3 LPAREN ID lec_aux RPAREN SEMIC pn_secu4 pn_secu5 .)


state 265

    (67) decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .

    ID              reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    RETURN          reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    READ            reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    WRITE           reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    IF              reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    WHILE           reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    FOR             reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    INT_TYPE        reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    FLOAT_TYPE      reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    CHAR_TYPE       reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    LPAREN          reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    INT_CTE         reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    FLOAT_CTE       reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)
    RCURLY          reduce using rule 67 (decision -> IF LPAREN expresiones RPAREN pn_cond1 THEN bloque else pn_cond2 .)


state 266

    (68) else -> ELSE pn_cond3 . bloque
    (28) bloque -> . LCURLY estatutos estatu_rec RCURLY

    LCURLY          shift and go to state 47

    bloque                         shift and go to state 271

state 267

    (70) loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .

    ID              reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    RETURN          reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    READ            reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    WRITE           reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    IF              reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    WHILE           reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    FOR             reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    INT_TYPE        reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    FLOAT_TYPE      reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    CHAR_TYPE       reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    LPAREN          reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    INT_CTE         reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    FLOAT_CTE       reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)
    RCURLY          reduce using rule 70 (loop_cond -> WHILE pn_loop1 LPAREN expresiones RPAREN pn_loop2 DO bloque pn_loop3 .)


state 268

    (71) loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .

    ID              reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    RETURN          reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    READ            reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    WRITE           reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    IF              reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    WHILE           reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    FOR             reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    INT_TYPE        reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    FLOAT_TYPE      reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    CHAR_TYPE       reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    LPAREN          reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    INT_CTE         reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    FLOAT_CTE       reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)
    RCURLY          reduce using rule 71 (loop_no_cond -> FOR ID nocond_aux ASSIGN expresiones TO expresiones DO bloque .)


state 269

    (18) dec_var_loc -> VARS tipos COLON ID dec_var_loc_aux SEMIC . var_loc_rec
    (22) var_loc_rec -> . tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec
    (23) var_loc_rec -> . empty
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct
    (101) empty -> .

    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14
    LCURLY          reduce using rule 101 (empty -> .)

    tipos                          shift and go to state 272
    var_loc_rec                    shift and go to state 273
    empty                          shift and go to state 274

state 270

    (20) dec_var_loc_aux -> COMMA ID . dec_var_loc_aux
    (20) dec_var_loc_aux -> . COMMA ID dec_var_loc_aux
    (21) dec_var_loc_aux -> . empty
    (101) empty -> .

    COMMA           shift and go to state 261
    SEMIC           reduce using rule 101 (empty -> .)

    dec_var_loc_aux                shift and go to state 275
    empty                          shift and go to state 262

state 271

    (68) else -> ELSE pn_cond3 bloque .

    ID              reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    RETURN          reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    READ            reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    WRITE           reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    IF              reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    WHILE           reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    FOR             reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    INT_TYPE        reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    FLOAT_TYPE      reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    CHAR_TYPE       reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    LPAREN          reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    INT_CTE         reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    FLOAT_CTE       reduce using rule 68 (else -> ELSE pn_cond3 bloque .)
    RCURLY          reduce using rule 68 (else -> ELSE pn_cond3 bloque .)


state 272

    (22) var_loc_rec -> tipos . COLON ID dec_var_loc_aux SEMIC var_loc_rec

    COLON           shift and go to state 276


state 273

    (18) dec_var_loc -> VARS tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec .

    LCURLY          reduce using rule 18 (dec_var_loc -> VARS tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec .)


state 274

    (23) var_loc_rec -> empty .

    LCURLY          reduce using rule 23 (var_loc_rec -> empty .)


state 275

    (20) dec_var_loc_aux -> COMMA ID dec_var_loc_aux .

    SEMIC           reduce using rule 20 (dec_var_loc_aux -> COMMA ID dec_var_loc_aux .)


state 276

    (22) var_loc_rec -> tipos COLON . ID dec_var_loc_aux SEMIC var_loc_rec

    ID              shift and go to state 277


state 277

    (22) var_loc_rec -> tipos COLON ID . dec_var_loc_aux SEMIC var_loc_rec
    (20) dec_var_loc_aux -> . COMMA ID dec_var_loc_aux
    (21) dec_var_loc_aux -> . empty
    (101) empty -> .

    COMMA           shift and go to state 261
    SEMIC           reduce using rule 101 (empty -> .)

    dec_var_loc_aux                shift and go to state 278
    empty                          shift and go to state 262

state 278

    (22) var_loc_rec -> tipos COLON ID dec_var_loc_aux . SEMIC var_loc_rec

    SEMIC           shift and go to state 279


state 279

    (22) var_loc_rec -> tipos COLON ID dec_var_loc_aux SEMIC . var_loc_rec
    (22) var_loc_rec -> . tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec
    (23) var_loc_rec -> . empty
    (11) tipos -> . INT_TYPE pn_tipoAct
    (12) tipos -> . FLOAT_TYPE pn_tipoAct
    (13) tipos -> . CHAR_TYPE pn_tipoAct
    (101) empty -> .

    INT_TYPE        shift and go to state 12
    FLOAT_TYPE      shift and go to state 13
    CHAR_TYPE       shift and go to state 14
    LCURLY          reduce using rule 101 (empty -> .)

    tipos                          shift and go to state 272
    var_loc_rec                    shift and go to state 280
    empty                          shift and go to state 274

state 280

    (22) var_loc_rec -> tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec .

    LCURLY          reduce using rule 22 (var_loc_rec -> tipos COLON ID dec_var_loc_aux SEMIC var_loc_rec .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 47 resolved as shift
WARNING: shift/reduce conflict for READ in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 47 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 47 resolved as shift
WARNING: shift/reduce conflict for CHAR_TYPE in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 47 resolved as shift
WARNING: shift/reduce conflict for INT_CTE in state 47 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CTE in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 53 resolved as shift
WARNING: shift/reduce conflict for READ in state 53 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 53 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 53 resolved as shift
WARNING: shift/reduce conflict for FOR in state 53 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 53 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 53 resolved as shift
WARNING: shift/reduce conflict for CHAR_TYPE in state 53 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 53 resolved as shift
WARNING: shift/reduce conflict for INT_CTE in state 53 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CTE in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 86 resolved as shift
WARNING: shift/reduce conflict for READ in state 86 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 86 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 86 resolved as shift
WARNING: shift/reduce conflict for FOR in state 86 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 86 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 86 resolved as shift
WARNING: shift/reduce conflict for CHAR_TYPE in state 86 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 86 resolved as shift
WARNING: shift/reduce conflict for INT_CTE in state 86 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CTE in state 86 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for INT_CTE in state 122 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CTE in state 122 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (estatutos -> llamada_func)
WARNING: rejected rule (factor -> llamada_func) in state 56
WARNING: reduce/reduce conflict in state 66 resolved using rule (factor -> ID)
WARNING: rejected rule (pn_llamFunc1 -> <empty>) in state 66
WARNING: reduce/reduce conflict in state 88 resolved using rule (estatu_rec -> empty)
WARNING: rejected rule (estatutos -> empty) in state 88
WARNING: reduce/reduce conflict in state 122 resolved using rule (empty -> <empty>)
WARNING: rejected rule (pn_expresion5 -> <empty>) in state 122
WARNING: reduce/reduce conflict in state 125 resolved using rule (factor -> ID)
WARNING: rejected rule (pn_llamFunc1 -> <empty>) in state 125
WARNING: Rule (pn_llamFunc1 -> <empty>) is never reduced
